diff --git a/src/core/metacling/src/TCling.cxx b/core/metacling/src/TCling.cxx
index 5413aef378..cc94115b85 100644
--- a/src/core/metacling/src/TCling.cxx
+++ b/src/core/metacling/src/TCling.cxx
@@ -1112,6 +1112,12 @@ static std::string GetModuleNameAsString(clang::Module *M, const clang::Preproce
    return std::string(llvm::sys::path::stem(ModuleName));
 }
 
+static bool FileExists(const char *file)
+{
+   struct stat buf;
+   return (stat(file, &buf) == 0);
+}
+
 ////////////////////////////////////////////////////////////////////////////////
 /// Initialize the cling interpreter interface.
 /// \param argv - array of arguments passed to the cling::Interpreter constructor
@@ -1160,12 +1166,14 @@ TCling::TCling(const char *name, const char *title, const char* const argv[])
       // same functionality).
       if (!fCxxModulesEnabled) {
          std::string pchFilename = interpInclude + "/allDict.cxx.pch";
-         if (gSystem->Getenv("ROOT_PCH")) {
-            pchFilename = gSystem->Getenv("ROOT_PCH");
+         if (gSystem->Getenv("CLING_STANDARD_PCH")) {
+            pchFilename = gSystem->Getenv("CLING_STANDARD_PCH");
          }
 
-         clingArgsStorage.push_back("-include-pch");
-         clingArgsStorage.push_back(pchFilename);
+         if (FileExists(pchFilename.c_str())) {
+            clingArgsStorage.push_back("-include-pch");
+            clingArgsStorage.push_back(pchFilename);
+         }
       }
 
       clingArgsStorage.push_back("-Wno-undefined-inline");
diff --git a/src/core/dictgen/src/rootcling_impl.cxx b/src/core/dictgen/src/rootcling_impl.cxx
index b53b7352f9..0672f3082c 100644
--- a/src/core/dictgen/src/rootcling_impl.cxx
+++ b/src/core/dictgen/src/rootcling_impl.cxx
@@ -89,6 +89,7 @@ const char *rootClingHelp =
 #include "llvm/Support/Path.h"
 #include "llvm/Support/PrettyStackTrace.h"
 #include "llvm/Support/Signals.h"
+#include "llvm/Support/Process.h"
 
 #include "RtypesCore.h"
 #include "TModuleGenerator.h"
@@ -1908,6 +1908,8 @@ void GenerateLinkdef(int *argc, char **argv, int firstInputFile,
    code_for_parser += "#pragma link off all functions;\n\n";

    for (int i = firstInputFile; i < *argc; i++) {
+      if (argv[i][0] == '-') // reached more options
+         break;
       char *s, trail[3];
       int   nostr = 0, noinp = 0, bcnt = 0, l = strlen(argv[i]) - 1;
       for (int j = 0; j < 3; j++) {
@@ -4185,6 +4188,18 @@ int RootClingMain(int argc,
             continue;
          }
 
+         if (strcmp("-cxxflags", argv[ic]) == 0 && (ic + 1) < argc) {
+            // Add additional flags straight to Cling
+            StringRef Env(argv[ic + 1]);
+            while (!Env.empty()) {
+                StringRef Arg;
+                std::tie(Arg, Env) = Env.split(' ');
+                clingArgs.push_back(Arg.str());
+            }
+            ic += 2;
+            continue;
+         }
+
          if ((ic + 1) < argc && strcmp("-isysroot", argv[ic]) == 0) {
             clingArgs.push_back(argv[ic++]);
             clingArgs.push_back(argv[ic++]);
@@ -4431,6 +4446,17 @@ int RootClingMain(int argc,
    ROOT::TMetaUtils::TClingLookupHelper helper(interp, normCtxt, 0, 0);
    TClassEdit::Init(&helper);
 
+   // Process externally passed arguments if present.
+   llvm::Optional<std::string> EnvOpt = llvm::sys::Process::GetEnv("EXTRA_CLING_ARGS");
+   if (EnvOpt.hasValue()) {
+      StringRef Env(*EnvOpt);
+      while (!Env.empty()) {
+         StringRef Arg;
+         std::tie(Arg, Env) = Env.split(' ');
+         clingArgs.push_back(Arg.str());
+      }
+   }
+
    // flags used only for the pragma parser:
    clingArgs.push_back("-D__CINT__");
    clingArgs.push_back("-D__MAKECINT__");
@@ -5252,6 +5278,7 @@ namespace genreflex {
                        const std::vector<std::string> &warnings,
                        const std::string &rootmapFileName,
                        const std::string &rootmapLibName,
+                       const std::string &extraFlags,
                        bool interpreteronly,
                        bool doSplit,
                        bool isDeep,
@@ -5314,6 +5341,12 @@ namespace genreflex {
          argvVector.push_back(string2charptr(newRootmapLibName));
       }
 
+      // any extra C++ flags picked up
+      if (!extraFlags.empty()) {
+         argvVector.push_back(string2charptr("-cxxflags"));
+         argvVector.push_back(string2charptr(extraFlags));
+      }
+
       // Interpreter only dictionaries
       if (interpreteronly)
          argvVector.push_back(string2charptr("-interpreteronly"));
@@ -5336,7 +5369,7 @@ namespace genreflex {
       AddToArgVectorSplit(argvVector, pcmsNames, "-m");
 
       // Inline the input header
-      argvVector.push_back(string2charptr("-inlineInputHeader"));
+      // argvVector.push_back(string2charptr("-inlineInputHeader"));
 
       // Write empty root pcms
       if (writeEmptyRootPCM)
@@ -5403,6 +5436,7 @@ namespace genreflex {
                            const std::vector<std::string> &warnings,
                            const std::string &rootmapFileName,
                            const std::string &rootmapLibName,
+                           const std::string &extraFlags,
                            bool interpreteronly,
                            bool doSplit,
                            bool isDeep,
@@ -5440,6 +5474,7 @@ namespace genreflex {
                                           warnings,
                                           rootmapFileName,
                                           rootmapLibName,
+                                          extraFlags,
                                           interpreteronly,
                                           doSplit,
                                           isDeep,
@@ -5557,6 +5592,7 @@ int GenReflexMain(int argc, char **argv)
                        SELECTIONFILENAME,
                        ROOTMAP,
                        ROOTMAPLIB,
+                       EXTRAFLAGS,
                        PCMFILENAME,
                        DEEP,
                        DEBUG,
@@ -5678,6 +5714,9 @@ int GenReflexMain(int argc, char **argv)
    const char *rootmapLibUsage =
       "--rootmap-lib\tLibrary name for the rootmap file.\n";
 
+   const char *cxxflagsUsage =
+      "--cxxflags\textra C++ compiler option flags.\n";
+
    // The Descriptor
    const ROOT::option::Descriptor genreflexUsageDescriptor[] = {
       {
@@ -5738,6 +5777,14 @@ int GenReflexMain(int argc, char **argv)
          rootmapLibUsage
       },
 
+      {
+         EXTRAFLAGS,
+         STRING ,
+         "", "cxxflags",
+         ROOT::option::FullArg::Required,
+         cxxflagsUsage
+      }, 
+
       {
          INTERPRETERONLY,
          NOTYPE,
@@ -5996,6 +6043,11 @@ int GenReflexMain(int argc, char **argv)

    bool isCxxmodule = options[CXXMODULE];

+   // Optional extra flags
+   std::string extraFlags;
+   if (options[EXTRAFLAGS])
+       extraFlags = options[EXTRAFLAGS].arg;
+
    bool multidict = false;
    if (options[MULTIDICT]) multidict = true;
 
@@ -6085,6 +6137,7 @@ int GenReflexMain(int argc, char **argv)
                                     warnings,
                                     rootmapFileName,
                                     rootmapLibName,
+                                    extraFlags,
                                     interpreteronly,
                                     doSplit,
                                     isDeep,
@@ -6108,6 +6161,7 @@ int GenReflexMain(int argc, char **argv)
                                         warnings,
                                         rootmapFileName,
                                         rootmapLibName,
+                                        extraFlags,
                                         interpreteronly,
                                         doSplit,
                                         isDeep,
diff --git a/src/etc/dictpch/makepch.py b/src/etc/dictpch/makepch.py
index dd8faabc13..f633342f5c 100755
--- a/src/etc/dictpch/makepch.py
+++ b/src/etc/dictpch/makepch.py
@@ -41,6 +41,12 @@ def getCppFlags(cppflagsFilename):
    ifile = open(cppflagsFilename)
    lines = ifile.readlines()
    ifile.close()
+   if "std" in os.environ.get("EXTRA_CLING_ARGS", ""):
+      keep = []
+      for line in lines:
+         if not "std" in line:
+             keep.append(line)
+      lines = keep
    cppFlags = " ".join(map(lambda line: line[:-1], lines))
    return cppFlags
 
diff --git a/src/config/RConfigure.in b/src/config/RConfigure.in
index e8210e2f65..63b2a8dc99 100644
--- a/src/config/RConfigure.in
+++ b/src/config/RConfigure.in
@@ -59,4 +59,64 @@
 #@hastmvagpu@ R__HAS_TMVAGPU /**/

 
+#if __cplusplus > 201402L
+#ifndef R__USE_CXX17
+#define R__USE_CXX17
+#endif
+#ifdef R__USE_CXX14
+#undef R__USE_CXX14
+#endif
+#ifdef R__USE_CXX11
+#undef R__USE_CXX11
+#endif
+
+#ifndef R__HAS_STD_STRING_VIEW
+#define R__HAS_STD_STRING_VIEW
+#endif
+#ifdef R__HAS_STD_EXPERIMENTAL_STRING_VIEW
+#undef R__HAS_STD_EXPERIMENTAL_STRING_VIEW
+#endif
+#ifdef R__HAS_STOD_STRING_VIEW
+#undef R__HAS_STOD_STRING_VIEW
+#endif
+
+#ifndef R__HAS_STD_INVOKE
+#define R__HAS_STD_INVOKE
+#endif
+#ifndef R__HAS_STD_APPLY
+#define R__HAS_STD_APPLY
+#endif
+
+#ifndef R__HAS_STD_INDEX_SEQUENCE
+#define R__HAS_STD_INDEX_SEQUENCE
+#endif
+
+#elif __cplusplus > 201103L
+#ifdef R__USE_CXX17
+#undef R__USE_CXX17
+#endif
+#ifndef R__USE_CXX14
+#define R__USE_CXX14
+#endif
+#ifdef R__USE_CXX11
+#undef R__USE_CXX11
+#endif
+
+#ifndef R__HAS_STD_INDEX_SEQUENCE
+#define R__HAS_STD_INDEX_SEQUENCE
+#endif
+
+#else
+#ifdef R__USE_CXX17
+#undef R__USE_CXX17
+#endif
+#ifdef R__USE_CXX14
+#undef R__USE_CXX14
+#endif
+#ifndef R__USE_CXX11
+#define R__USE_CXX11
+#endif
+
+#endif
+
 #endif
diff --git a/src/build/unix/makepchinput.py b/src/build/unix/makepchinput.py
index 1468a87277..c823c5eef7 100755
--- a/src/build/unix/makepchinput.py
+++ b/src/build/unix/makepchinput.py
@@ -63,9 +63,10 @@ def getGuardedStlInclude(headerName):
 #-------------------------------------------------------------------------------
 def getSTLIncludes():
    """
-   Here we include the list of c++11 stl headers
+   Here we include the list of c++11/14/17 stl headers
    From http://en.cppreference.com/w/cpp/header
    valarray is removed because it causes lots of compilation at startup.
+   codecvt, ctgmath, and cstdbool are removed as they are deprecated in C++17
    """
    stlHeadersList = ("cstdlib",
                      "csignal",
@@ -133,7 +134,7 @@ def getSTLIncludes():
                      "cstdio",
                      "locale",
                      "clocale",
-                     "codecvt",
+#                    "codecvt",
                      "atomic",
                      "thread",
                      "mutex",
@@ -141,9 +142,21 @@ def getSTLIncludes():
                      "condition_variable",
                      "ciso646",
                      "ccomplex",
-                     "ctgmath",
+#                    "ctgmath",
                      "regex",
-                     "cstdbool")
+#                    "cstdbool",
+                     # add C++14 headers
+                     "shared_mutex",
+                     # add C++17 headers
+                     "any",
+                     "optional",
+                     "variant",
+                     "memory_resource",
+                     "string_view",
+                     "charconv",
+                     "execution",
+                     "filesystem",
+                     )

    allHeadersPartContent = "// STL headers\n"

