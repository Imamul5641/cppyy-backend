diff --git a/src/core/metacling/src/TClingCallFunc.cxx b/src/core/metacling/src/TClingCallFunc.cxx
index 9bc534b3cd..52bf69c5b3 100644
--- a/src/core/metacling/src/TClingCallFunc.cxx
+++ b/src/core/metacling/src/TClingCallFunc.cxx
@@ -437,26 +437,34 @@ void TClingCallFunc::make_narg_call(const std::string &return_type, const unsign
       callbuf << "))";
    }
 
-   if (const CXXMethodDecl *MD = dyn_cast<CXXMethodDecl>(FD)) {
-      // This is a class, struct, or union member.
-      if (MD->isConst())
-         callbuf << "((const " << class_name << "*)obj)->";
-      else
-         callbuf << "((" << class_name << "*)obj)->";
-   } else if (const NamedDecl *ND =
-                 dyn_cast<NamedDecl>(FD->getDeclContext())) {
-      // This is a namespace member.
-      (void) ND;
-      callbuf << class_name << "::";
-   }
-   //   callbuf << fMethod->Name() << "(";
+   std::string function_name;
    {
-      std::string name;
+      llvm::raw_string_ostream stream(function_name);
+      FD->getNameForDiagnostic(stream, FD->getASTContext().getPrintingPolicy(), /*Qualified=*/false);
+   }
+
+   int optype = 0;
+   if (N == 2) {
+       if (!strncmp(function_name.c_str(), "operator==<", 11)) optype = 1;
+       else if (!strncmp(function_name.c_str(), "operator!=<", 11)) optype = 2;
+   }
+   if (!optype) {
+      if (const CXXMethodDecl *MD = dyn_cast<CXXMethodDecl>(FD)) {
+         // This is a class, struct, or union member.
+         if (MD->isConst())
+            callbuf << "((const " << class_name << "*)obj)->";
+         else
+            callbuf << "((" << class_name << "*)obj)->";
+      } else if (const NamedDecl *ND =
+                    dyn_cast<NamedDecl>(FD->getDeclContext())) {
+         // This is a namespace member.
+         (void) ND;
+         callbuf << class_name << "::";
+      }
+      //   callbuf << fMethod->Name() << "(";
       {
-         llvm::raw_string_ostream stream(name);
-         FD->getNameForDiagnostic(stream, FD->getASTContext().getPrintingPolicy(), /*Qualified=*/false);
+         callbuf << function_name;
       }
-      callbuf << name;
    }
    if (ShouldCastFunction) callbuf << ")";
 
@@ -471,14 +479,20 @@ void TClingCallFunc::make_narg_call(const std::string &return_type, const unsign
       collect_type_info(QT, typedefbuf, callbuf, type_name, refType, isPointer, indent_level, true);
 
       if (i) {
-         callbuf << ',';
-         if (i % 2) {
-            callbuf << ' ';
-         } else {
-            callbuf << "\n";
-            for (int j = 0; j <= indent_level; ++j) {
-               callbuf << kIndentString;
+         if (!optype) {
+            callbuf << ',';
+            if (i % 2) {
+               callbuf << ' ';
+            } else {
+               callbuf << "\n";
+               for (int j = 0; j <= indent_level; ++j) {
+                  callbuf << kIndentString;
+               }
             }
+         } else if (optype == 1) {
+            callbuf << " == ";
+         } else if (optype == 2) {
+            callbuf << " != ";
          }
       }
 
