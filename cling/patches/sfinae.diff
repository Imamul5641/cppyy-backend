diff --git a/src/core/metacling/src/TClingCallFunc.cxx b/src/core/metacling/src/TClingCallFunc.cxx
index 92c96215c0..626f230d39 100644
--- a/src/core/metacling/src/TClingCallFunc.cxx
+++ b/src/core/metacling/src/TClingCallFunc.cxx
@@ -409,7 +409,8 @@ void TClingCallFunc::make_narg_call(const std::string &return_type, const unsign
    // we supply the object parameter.
    // Therefore we only use it in cases where we know it works and set this variable
    // to true when we do.
-   bool ShouldCastFunction = !isa<CXXMethodDecl>(FD) && N == FD->getNumParams();
+   bool ShouldCastFunction = !isa<CXXMethodDecl>(FD) && N == FD->getNumParams() \
+                             && !FD->isTemplateInstantiation();
    if (ShouldCastFunction) {
       callbuf << "(";
       callbuf << "(";
diff --git a/src/core/clingutils/src/TClingUtils.cxx b/src/core/clingutils/src/TClingUtils.cxx
index a7d51a41c6..e93962db75 100644
--- a/src/core/clingutils/src/TClingUtils.cxx
+++ b/src/core/clingutils/src/TClingUtils.cxx
@@ -3921,7 +3921,16 @@ void ROOT::TMetaUtils::GetNormalizedName(std::string &norm_name, const clang::Qu
       return;
    }
 
-   clang::QualType normalizedType = GetNormalizedType(type,interpreter,normCtxt);
+// for consistency, use the canonical type instead of type, unless the canonical type
+// is not accessible
+   clang::QualType usetype = type;
+   if (const clang::Type* tptr = usetype.getCanonicalType().getTypePtr()) {
+      clang::Decl* decl = tptr->getAsCXXRecordDecl();
+      if (decl && !(decl->getAccess() == clang::AS_private || decl->getAccess() == clang::AS_protected))
+         usetype = usetype.getCanonicalType();
+   }
+
+   clang::QualType normalizedType = GetNormalizedType(usetype,interpreter,normCtxt);
 
    clang::ASTContext &ctxt = interpreter.getCI()->getASTContext();
    clang::PrintingPolicy policy(ctxt.getPrintingPolicy());
diff --git a/src/core/metacling/src/TClingMethodInfo.cxx b/src/core/metacling/src/TClingMethodInfo.cxx
index bbfb6aa962..fe25edfa46 100644
--- a/src/core/metacling/src/TClingMethodInfo.cxx
+++ b/src/core/metacling/src/TClingMethodInfo.cxx
@@ -667,7 +678,15 @@ TClingTypeInfo *TClingMethodInfo::Type() const
          ti.Init(qt);
       }
    } else {
-      clang::QualType qt = GetMethodDecl()->getReturnType();
+      clang::QualType qt = GetMethodDecl()->getReturnType();
+      // if the type is not deduced (e.g. 'auto'), it will cause problems downstream that
+      // need the FunctionDecl to resolve, so pre-empt those issues by deducing it here.
+      if (qt.getTypePtr()->isUndeducedType()) {
+          clang::FunctionDecl* decl = (clang::FunctionDecl*)GetMethodDecl();
+          cling::Interpreter::PushTransactionRAII RAII(fInterp);
+          if (!fInterp->getSema().DeduceReturnType(decl, decl->getPointOfInstantiation(), false))
+              qt = GetMethodDecl()->getReturnType();
+      }
       ti.Init(qt);
    }
    return &ti;
