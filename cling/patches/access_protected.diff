diff --git a/src/core/meta/src/TListOfDataMembers.cxx b/src/core/meta/src/TListOfDataMembers.cxx
index caac907..7d38d13 100644
--- a/src/core/meta/src/TListOfDataMembers.cxx
+++ b/src/core/meta/src/TListOfDataMembers.cxx
@@ -439,7 +440,7 @@ void TListOfDataMembers::Load()
 
    // Treat the complex<float>, complex<double> in a special way, i.e. replacing
    // the datamembers with the ones of _root_std_complex<T>
-   bool skipChecks = false;
+   bool skipChecks = true;
    if (fClass) {
       auto complexType = TClassEdit::GetComplexType(fClass->GetName());
       switch(complexType) {
@@ -480,7 +481,7 @@ void TListOfDataMembers::Load()
       if (gInterpreter->DataMemberInfo_IsValid(t)) {
          // Get will check if there is already there or create a new one
          // (or re-use a previously unloaded version).
-         Get(t,skipChecks);
+         Get(t, skipChecks);
       }
    }
    gInterpreter->DataMemberInfo_Delete(t);
diff --git a/src/core/metacling/src/TClingDataMemberInfo.cxx b/src/core/metacling/src/TClingDataMemberInfo.cxx
index 354ae89..5f8a75f 100644
--- a/src/core/metacling/src/TClingDataMemberInfo.cxx
+++ b/src/core/metacling/src/TClingDataMemberInfo.cxx
@@ -113,6 +114,14 @@ void TClingDataMemberInfo::CheckForIoTypeAndName() const
 
 }
 
+const clang::Decl* TClingDataMemberInfo::GetDecl() const {
+   if (const clang::Decl* SingleDecl = TClingDeclInfo::GetDecl())
+      return SingleDecl;
+   if (clang::UsingShadowDecl* shadow_decl = llvm::dyn_cast<clang::UsingShadowDecl>(*fIter))
+      return shadow_decl->getTargetDecl();
+   return *fIter;
+}
+
 TDictionary::DeclId_t TClingDataMemberInfo::GetDeclId() const
 {
    if (!IsValid()) {
@@ -310,6 +319,13 @@ int TClingDataMemberInfo::InternalNext()
          // and namespace variable members.
          return 1;
       }
+      if (clang::UsingShadowDecl* shadow_decl = llvm::dyn_cast<clang::UsingShadowDecl>(*fIter)) {
+          clang::Decl::Kind target_DK = shadow_decl->getTargetDecl()->getKind();
+          if ((target_DK == clang::Decl::Field) || (target_DK == clang::Decl::EnumConstant) ||
+              (target_DK == clang::Decl::Var)) {
+             return 1;       // as above
+          }
+      }
       // Collect internal `__cling_N5xxx' inline namespaces; they will be traversed later
       if (auto NS = dyn_cast<NamespaceDecl>(*fIter)) {
          if (NS->getDeclContext()->isTranslationUnit() && NS->isInlineNamespace())
@@ -420,11 +436,16 @@ long TClingDataMemberInfo::Property() const
       return 0L;
    }
    long property = 0L;
-   const clang::Decl *declaccess = GetDecl();
-   if (declaccess->getDeclContext()->isTransparentContext()) {
-      declaccess = llvm::dyn_cast<clang::Decl>(declaccess->getDeclContext());
-      if (!declaccess) declaccess = GetDecl();
+   const clang::Decl *decl = GetDecl();
+   if (decl->getDeclContext()->isTransparentContext()) {
+      decl = llvm::dyn_cast<clang::Decl>(decl->getDeclContext());
+      if (!decl) decl = GetDecl();
    }
+
+   const clang::Decl *declaccess = decl;
+   if (!TClingDeclInfo::GetDecl() && llvm::dyn_cast<clang::UsingShadowDecl>(*fIter))
+      declaccess = *fIter;
+
    switch (declaccess->getAccess()) {
       case clang::AS_public:
          property |= kIsPublic;
@@ -451,7 +472,7 @@ long TClingDataMemberInfo::Property() const
          property |= kIsConstexpr;
       if (vard->getStorageClass() == clang::SC_Static) {
          property |= kIsStatic;
-      } else if (declaccess->getDeclContext()->isNamespace()) {
+      } else if (decl->getDeclContext()->isNamespace()) {
          // Data members of a namespace are global variable which were
          // considered to be 'static' in the CINT (and thus ROOT) scheme.
          property |= kIsStatic;
diff --git a/src/core/metacling/src/TClingDataMemberInfo.h b/src/core/metacling/src/TClingDataMemberInfo.h
index 7d04549..b4f11fa 100644
--- a/src/core/metacling/src/TClingDataMemberInfo.h
+++ b/src/core/metacling/src/TClingDataMemberInfo.h
@@ -125,11 +125,7 @@ public:
 
    int                ArrayDim() const;
    TClingClassInfo   *GetClassInfo() const { return fClassInfo; }
-   const clang::Decl *GetDecl() const override {
-     if (const clang::Decl* SingleDecl = TClingDeclInfo::GetDecl())
-       return SingleDecl;
-     return *fIter;
-   }
+   const clang::Decl *GetDecl() const override;
    DeclId_t           GetDeclId() const;
    int                MaxIndex(int dim) const;
    int                InternalNext();
diff --git a/src/core/meta/inc/TListOfFunctions.h b/src/core/meta/inc/TListOfFunctions.h
index 5565d41..77b5963 100644
--- a/src/core/meta/inc/TListOfFunctions.h
+++ b/src/core/meta/inc/TListOfFunctions.h
@@ -80,7 +80,7 @@ public:
 
 
    TFunction *Find(DeclId_t id) const;
-   TFunction *Get(DeclId_t id, bool verify = true);
+   TFunction *Get(DeclId_t id, MethodInfo_t* minfo = nullptr, bool verify = true);
 
    void       AddFirst(TObject *obj);
    void       AddFirst(TObject *obj, Option_t *opt);
diff --git a/src/core/meta/src/TListOfFunctions.cxx b/src/core/meta/src/TListOfFunctions.cxx
index 36774f7..a23e8f5 100644
--- a/src/core/meta/src/TListOfFunctions.cxx
+++ b/src/core/meta/src/TListOfFunctions.cxx
@@ -259,7 +259,7 @@ TFunction *TListOfFunctions::Find(DeclId_t id) const
 /// Return (after creating it if necessary) the TMethod or TFunction
 /// describing the function corresponding to the Decl 'id'.
 
-TFunction *TListOfFunctions::Get(DeclId_t id, bool verify)
+TFunction *TListOfFunctions::Get(DeclId_t id, MethodInfo_t* minfo, bool verify)
 {
    if (!id) return 0;
 
@@ -276,7 +276,9 @@ TFunction *TListOfFunctions::Get(DeclId_t id, bool verify)
       }
    }
 
-   MethodInfo_t *m = gInterpreter->MethodInfo_Factory(id);
+   MethodInfo_t *m = minfo ? \
+       gInterpreter->MethodInfo_FactoryCopy(minfo) : \
+       gInterpreter->MethodInfo_Factory(id);
 
    // Let's see if this is a reload ...
    const char *name = gInterpreter->MethodInfo_Name(m);
@@ -395,7 +397,7 @@ void TListOfFunctions::Load()
          TDictionary::DeclId_t mid = gInterpreter->GetDeclId(t);
          // Get will check if there is already there or create a new one
          // (or re-use a previously unloaded version).
-         Get(mid, false /* verify */);
+         Get(mid, t, false /* verify */);
       }
    }
    gInterpreter->MethodInfo_Delete(t);
diff --git a/src/core/metacling/src/TClingMethodInfo.cxx b/src/core/metacling/src/TClingMethodInfo.cxx
index dfd7596..f751a23 100644
--- a/src/core/metacling/src/TClingMethodInfo.cxx
+++ b/src/core/metacling/src/TClingMethodInfo.cxx
@@ -110,7 +110,8 @@ TClingMethodInfo::TClingMethodInfo(const TClingMethodInfo &rhs) :
    fIter(rhs.fIter),
    fTitle(rhs.fTitle),
    fTemplateSpec(rhs.fTemplateSpec),
-   fUsingIter(nullptr)
+   fUsingIter(nullptr),
+   fAccessDecl(rhs.fAccessDecl)
 {
 
    if (rhs.fUsingIter) {
@@ -134,6 +135,7 @@ TClingMethodInfo& TClingMethodInfo::operator=(const TClingMethodInfo &rhs) {
    fTitle = rhs.fTitle;
    fTemplateSpec = rhs.fTemplateSpec;
    fUsingIter = nullptr;
+   fAccessDecl = rhs.fAccessDecl;
 
    if (rhs.fUsingIter) {
       // The UsingIterator query the decl.
@@ -148,7 +150,7 @@ TClingMethodInfo& TClingMethodInfo::operator=(const TClingMethodInfo &rhs) {
 TClingMethodInfo::TClingMethodInfo(cling::Interpreter *interp,
                                    TClingClassInfo *ci)
    : TClingDeclInfo(nullptr), fInterp(interp), fFirstTime(true), fContextIdx(0U), fTitle(""),
-     fTemplateSpec(nullptr), fUsingIter(nullptr)
+     fTemplateSpec(nullptr), fUsingIter(nullptr), fAccessDecl(nullptr)
 {
    R__LOCKGUARD(gInterpreterMutex);
 
@@ -177,7 +179,7 @@ TClingMethodInfo::TClingMethodInfo(cling::Interpreter *interp,
 TClingMethodInfo::TClingMethodInfo(cling::Interpreter *interp,
                                    const clang::FunctionDecl *FD)
    : TClingDeclInfo(FD), fInterp(interp), fFirstTime(true), fContextIdx(0U), fTitle(""),
-     fTemplateSpec(nullptr), fUsingIter(nullptr)
+     fTemplateSpec(nullptr), fUsingIter(nullptr), fAccessDecl(nullptr)
 {
 
 }
@@ -244,6 +246,7 @@ void TClingMethodInfo::Init(const clang::FunctionDecl *decl)
    fTemplateSpec = 0;
    delete fUsingIter;
    fUsingIter = nullptr;
+   fAccessDecl = nullptr;
    fDecl = decl;
 }
 
@@ -447,7 +450,8 @@ int TClingMethodInfo::InternalNext()
       else {
          if (fUsingIter && *fUsingIter) {
             while (++(*fUsingIter)) {
-               if (*(*fUsingIter))
+               fAccessDecl = *(*fUsingIter);
+               if (fAccessDecl)
                   return 1;
             }
             delete fUsingIter; fUsingIter = nullptr;
@@ -490,10 +494,10 @@ int TClingMethodInfo::InternalNext()
       clang::UsingDecl* udecl =
           llvm::dyn_cast<clang::UsingDecl>(*fIter);
 
-      if ( udecl ) {
+      if (udecl) {
           // A UsingDecl potentially brings in a bunch of functions, so
           // start an inner loop to catch them all
-          delete fUsingIter;
+          delete fUsingIter; fAccessDecl = udecl;
           fUsingIter = new UsingIterator(fInterp, udecl);
           return 1;
       }
@@ -533,7 +537,9 @@ long TClingMethodInfo::Property() const
    const clang::FunctionDecl *fd = GetMethodDecl();
    if (fd->isConstexpr())
       property |= kIsConstexpr;
-   switch (fd->getAccess()) {
+
+   const clang::Decl* accessdecl = fAccessDecl ? fAccessDecl : fd;
+   switch (accessdecl->getAccess()) {
       case clang::AS_public:
          property |= kIsPublic;
          break;
diff --git a/src/core/metacling/src/TClingMethodInfo.h b/src/core/metacling/src/TClingMethodInfo.h
index 905ef5d..718a53c 100644
--- a/src/core/metacling/src/TClingMethodInfo.h
+++ b/src/core/metacling/src/TClingMethodInfo.h
@@ -62,6 +62,7 @@ private:
    std::string                                  fTitle; // The meta info for the method.
    const clang::FunctionDecl                   *fTemplateSpec; // an all-default-template-args function.
    UsingIterator                               *fUsingIter; // for internal loop over using functions. [We own]
+   clang::Decl                                 *fAccessDecl; // for determining access specifiers
 
    const clang::Decl* GetDeclSlow() const;
 
@@ -83,7 +84,7 @@ public:
    TDictionary::DeclId_t                        GetDeclId() const;
    cling::Interpreter                          *GetInterpreter() const { return fInterp; }
    void                                         CreateSignature(TString &signature) const;
-   void                                         Init(const clang::FunctionDecl *);
+   void                                         Init(const clang::FunctionDecl*);
    void                                        *InterfaceMethod(const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;
 
    const clang::Decl *GetDecl() const override {
diff --git a/src/core/metacling/src/TClingCallFunc.cxx b/src/core/metacling/src/TClingCallFunc.cxx
index 353f2df..e2dda52 100644
--- a/src/core/metacling/src/TClingCallFunc.cxx
+++ b/src/core/metacling/src/TClingCallFunc.cxx
@@ -262,7 +262,7 @@ void *TClingCallFunc::compile_wrapper(const string &wrapper_name, const string &
                                       bool withAccessControl/*=true*/)
 {
    return fInterp->compileFunction(wrapper_name, wrapper, false /*ifUnique*/,
-                                   withAccessControl);
+                                   false /* withAccessControl */);
 }
 
 void TClingCallFunc::collect_type_info(QualType &QT, ostringstream &typedefbuf, std::ostringstream &callbuf,
