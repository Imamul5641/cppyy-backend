diff --git a/src/interpreter/cling/lib/Interpreter/IncrementalCUDADeviceCompiler.cpp b/src/interpreter/cling/lib/Interpreter/IncrementalCUDADeviceCompiler.cpp
index 886b680938..d8026a055a 100644
--- a/src/interpreter/cling/lib/Interpreter/IncrementalCUDADeviceCompiler.cpp
+++ b/src/interpreter/cling/lib/Interpreter/IncrementalCUDADeviceCompiler.cpp
@@ -69,14 +69,23 @@ namespace cling {
                 m_CuArgs->additionalPtxOpt.end());
 
     // add included files to the cling ptx
+    bool next_is_pch = false;
     for (const char* c : invocationOptions.CompilerOpts.Remaining) {
       std::string s(c);
-      if (s.find("-include") == 0)
+      if (next_is_pch) {
+        argv.push_back(s+".device");
+        next_is_pch = false;
+        continue;
+      }
+      if (s.find("-include-pch") == 0) {
+        argv.push_back(s);
+        next_is_pch = true;
+      } else if (s.find("-include") == 0)
         argv.push_back(s);
     }
 
     std::vector<const char*> argvChar;
-    argvChar.resize(argv.size() + 1);
+    argvChar.resize(argv.size());
 
     std::transform(argv.begin(), argv.end(), argvChar.begin(),
                    [&](const std::string& s) { return s.c_str(); });
@@ -86,7 +95,6 @@ namespace cling {
 
     // create incremental compiler instance
     m_PTX_interp.reset(new Interpreter(argvChar.size(), argvChar.data()));
-
     if (!m_PTX_interp) {
       llvm::errs() << "Could not create PTX interpreter instance\n";
       return;
@@ -121,7 +129,7 @@ namespace cling {
       llvm::errs()
           << "IncrementalCUDADeviceCompiler: No valid c++ standard is set.\n";
 
-    uint32_t smVersion = 20;
+    uint32_t smVersion = 35;
     if (!invocationOptions.CompilerOpts.CUDAGpuArch.empty()) {
       llvm::StringRef(invocationOptions.CompilerOpts.CUDAGpuArch)
           .drop_front(3 /* sm_ */)
diff --git a/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Cuda.h b/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Cuda.h
index ef5d24dcf8..b6fe887e48 100644
--- a/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Cuda.h
+++ b/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Cuda.h
@@ -26,7 +26,8 @@ enum class CudaVersion {
   CUDA_92,
   CUDA_100,
   CUDA_101,
-  LATEST = CUDA_101,
+  CUDA_102,
+  LATEST = CUDA_102,
 };
 const char *CudaVersionToString(CudaVersion V);
 // Input is "Major.Minor"
diff --git a/src/interpreter/llvm/src/tools/clang/lib/Basic/Cuda.cpp b/src/interpreter/llvm/src/tools/clang/lib/Basic/Cuda.cpp
index f2b6c8cd3e..f5b61fe2ca 100644
--- a/src/interpreter/llvm/src/tools/clang/lib/Basic/Cuda.cpp
+++ b/src/interpreter/llvm/src/tools/clang/lib/Basic/Cuda.cpp
@@ -27,6 +27,8 @@ const char *CudaVersionToString(CudaVersion V) {
     return "10.0";
   case CudaVersion::CUDA_101:
     return "10.1";
+  case CudaVersion::CUDA_102:
+    return "10.1";
   }
   llvm_unreachable("invalid enum");
 }
@@ -40,7 +42,8 @@ CudaVersion CudaStringToVersion(llvm::StringRef S) {
       .Case("9.1", CudaVersion::CUDA_91)
       .Case("9.2", CudaVersion::CUDA_92)
       .Case("10.0", CudaVersion::CUDA_100)
-      .Case("10.1", CudaVersion::CUDA_101);
+      .Case("10.1", CudaVersion::CUDA_101)
+      .Case("10.2", CudaVersion::CUDA_102);
 }
 
 const char *CudaArchToString(CudaArch A) {
@@ -380,6 +383,8 @@ static CudaVersion ToCudaVersion(llvm::VersionTuple Version) {
     return CudaVersion::CUDA_100;
   case 101:
     return CudaVersion::CUDA_101;
+  case 102:
+    return CudaVersion::CUDA_102;
   default:
     return CudaVersion::UNKNOWN;
   }
diff --git a/src/interpreter/llvm/src/tools/clang/lib/Driver/ToolChains/Cuda.cpp b/src/interpreter/llvm/src/tools/clang/lib/Driver/ToolChains/Cuda.cpp
index 96f8c513bb..907e8672e0 100644
--- a/src/interpreter/llvm/src/tools/clang/lib/Driver/ToolChains/Cuda.cpp
+++ b/src/interpreter/llvm/src/tools/clang/lib/Driver/ToolChains/Cuda.cpp
@@ -62,6 +62,8 @@ static CudaVersion ParseCudaVersionFile(llvm::StringRef V) {
     return CudaVersion::CUDA_100;
   if (Major == 10 && Minor == 1)
     return CudaVersion::CUDA_101;
+  if (Major == 10 && Minor == 2)
+    return CudaVersion::CUDA_102;
   return CudaVersion::UNKNOWN;
 }
 
@@ -650,6 +652,7 @@ void CudaToolChain::addClangTargetOptions(
   // back-end.
   const char *PtxFeature = nullptr;
   switch(CudaInstallation.version()) {
+    case CudaVersion::CUDA_102:
     case CudaVersion::CUDA_101:
       PtxFeature = "+ptx64";
       break;
diff --git a/src/interpreter/llvm/src/tools/clang/lib/Headers/__clang_cuda_runtime_wrapper.h b/src/interpreter/llvm/src/tools/clang/lib/Headers/__clang_cuda_runtime_wrapper.h
index 3e362dd967..7ffaeed1c2 100644
--- a/src/interpreter/llvm/src/tools/clang/lib/Headers/__clang_cuda_runtime_wrapper.h
+++ b/src/interpreter/llvm/src/tools/clang/lib/Headers/__clang_cuda_runtime_wrapper.h
@@ -48,7 +48,7 @@
 #include "cuda.h"
 #if !defined(CUDA_VERSION)
 #error "cuda.h did not define CUDA_VERSION"
-#elif CUDA_VERSION < 7000 || CUDA_VERSION > 10010
+#elif CUDA_VERSION < 7000 || CUDA_VERSION > 10020
 #error "Unsupported CUDA version!"
 #endif
 
