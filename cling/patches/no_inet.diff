diff --git a/src/core/base/inc/TUUID.h b/src/core/base/inc/TUUID.h
index a2c6db4b6e..3344702c15 100644
--- a/src/core/base/inc/TUUID.h
+++ b/src/core/base/inc/TUUID.h
@@ -56,15 +56,15 @@ protected:
    };
 
    Int_t CmpTime(uuid_time_t *t1, uuid_time_t *t2);
-   void  Format(UShort_t clockseq, uuid_time_t ts);
-   void  GetNodeIdentifier();
+   void  Format(UShort_t clockseq, uuid_time_t ts, bool inetOK=true);
+   void  GetNodeIdentifier(bool inetOK=true);
    void  GetCurrentTime(uuid_time_t *timestamp);
    void  GetSystemTime(uuid_time_t *timestamp);
    void  GetRandomInfo(UChar_t seed[16]);
    void  SetFromString(const char *uuid_str);
 
 public:
-   TUUID();
+   TUUID(bool inetOK=true);
    TUUID(const char *uuid_str);
    virtual ~TUUID();
 
diff --git a/src/core/base/src/TProcessID.cxx b/src/core/base/src/TProcessID.cxx
index ea24c5c457..2da5e1219a 100644
--- a/src/core/base/src/TProcessID.cxx
+++ b/src/core/base/src/TProcessID.cxx
@@ -139,7 +139,7 @@ TProcessID *TProcessID::AddProcessID()
    snprintf(name,20,"ProcessID%d",apid);
    pid->SetName(name);
    pid->SetUniqueID((UInt_t)apid);
-   TUUID u;
+   TUUID u(false);
    //apid = fgPIDs->GetEntriesFast();
    pid->SetTitle(u.AsString());
    return pid;
diff --git a/src/core/base/src/TUUID.cxx b/src/core/base/src/TUUID.cxx
index ae4f2e0582..f55da5f6ed 100644
--- a/src/core/base/src/TUUID.cxx
+++ b/src/core/base/src/TUUID.cxx
@@ -137,7 +137,7 @@ ClassImp(TUUID);
 ////////////////////////////////////////////////////////////////////////////////
 /// Create a UUID.
 
-TUUID::TUUID()
+TUUID::TUUID(bool inetOK)
 {
    TTHREAD_TLS(uuid_time_t) time_last;
    TTHREAD_TLS(UShort_t) clockseq(0);
@@ -173,7 +173,7 @@ TUUID::TUUID()
       if (clockseq == 0) clockseq++;
    }
 
-   Format(clockseq, timestamp);
+   Format(clockseq, timestamp, inetOK);
 
    time_last = timestamp;
    fUUIDIndex = 1<<30;
@@ -308,7 +308,7 @@ void TUUID::StreamerV1(TBuffer &b)
 ////////////////////////////////////////////////////////////////////////////////
 /// Make a UUID from timestamp, clockseq and node id.
 
-void TUUID::Format(UShort_t clockseq, uuid_time_t ts)
+void TUUID::Format(UShort_t clockseq, uuid_time_t ts, bool inetOK)
 {
    fTimeLow = ts.low;
    fTimeMid = (UShort_t)(ts.high & 0xFFFF);
@@ -317,7 +317,7 @@ void TUUID::Format(UShort_t clockseq, uuid_time_t ts)
    fClockSeqLow = clockseq & 0xFF;
    fClockSeqHiAndReserved = (clockseq & 0x3F00) >> 8;
    fClockSeqHiAndReserved |= 0x80;
-   GetNodeIdentifier();
+   GetNodeIdentifier(inetOK);
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -410,19 +410,22 @@ void TUUID::GetSystemTime(uuid_time_t *timestamp)
 /// Get node identifier. Try first to get network address, if no
 /// network interface try random info based on some machine parameters.
 
-void TUUID::GetNodeIdentifier()
+void TUUID::GetNodeIdentifier(bool inetOK)
 {
    static UInt_t adr = 0;
 
    if (gSystem) {
 #ifndef R__WIN32
-      if (!adr) {
-         TInetAddress addr = gSystem->GetHostByName(gSystem->HostName());
-         if (addr.IsValid())
-            adr = addr.GetAddress();
-         else
-            adr = 1;  // illegal address
-      }
+      if (inetOK) {
+         if (!adr) {
+            TInetAddress addr = gSystem->GetHostByName(gSystem->HostName());
+            if (addr.IsValid())
+               adr = addr.GetAddress();
+            else
+               adr = 1;  // illegal address
+         }
+      } else
+            adr = 1;
 #else
       // this way to get the machine's IP address is needed because
       // GetHostByName() on Win32 contacts the DNS which we don't want
