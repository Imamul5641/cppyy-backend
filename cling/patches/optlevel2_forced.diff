diff --git a/src/core/metacling/src/TCling.cxx b/src/core/metacling/src/TCling.cxx
index 38f951c12b..2823533580 100644
--- a/src/core/metacling/src/TCling.cxx
+++ b/src/core/metacling/src/TCling.cxx
@@ -1241,6 +1241,10 @@ TCling::TCling(const char *name, const char *title, const char* const argv[])
                                          &(interpArgs[0]),
                                          llvmResourceDir);
 
+   // force optlevel 2
+   fInterpreter->getCI()->getCodeGenOpts().OptimizationLevel = 2;
+   fInterpreter->setDefaultOptLevel(2);
+
    if (!fromRootCling) {
       fInterpreter->installLazyFunctionCreator(llvmLazyFunctionCreator);
    }
diff --git a/src/interpreter/cling/lib/Interpreter/CIFactory.cpp b/src/interpreter/cling/lib/Interpreter/CIFactory.cpp
index f97c86032f..69321c5579 100644
--- a/src/interpreter/cling/lib/Interpreter/CIFactory.cpp
+++ b/src/interpreter/cling/lib/Interpreter/CIFactory.cpp
@@ -1189,7 +1189,7 @@ static void stringifyPreprocSetting(PreprocessorOptions& PPOpts,
     // FIXME: We have a bug when we switch to -O2, for some cases it takes
     // several minutes to optimize, while the same code compiled by clang -O2
     // takes only a few seconds.
-    CGOpts.OptimizationLevel = 0;
+    CGOpts.OptimizationLevel = 2;
     // Taken from a -O2 run of clang:
     CGOpts.DiscardValueNames = 1;
     CGOpts.OmitLeafFramePointer = 1;
diff --git a/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp b/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
index 56692341b5..c21854e757 100644
--- a/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
+++ b/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
@@ -916,12 +916,12 @@ namespace cling {
     std::vector<ASTTPtr_t> ASTTransformers;
     ASTTransformers.emplace_back(new AutoSynthesizer(TheSema));
     ASTTransformers.emplace_back(new EvaluateTSynthesizer(TheSema));
-    if (hasCodeGenerator() && !m_Interpreter->getOptions().NoRuntime) {
+    //if (hasCodeGenerator() && !m_Interpreter->getOptions().NoRuntime) {
        // Don't protect against crashes if we cannot run anything.
        // cling might also be in a PCH-generation mode; don't inject our Sema pointer
        // into the PCH.
-       ASTTransformers.emplace_back(new NullDerefProtectionTransformer(m_Interpreter));
-    }
+    //   ASTTransformers.emplace_back(new NullDerefProtectionTransformer(m_Interpreter));
+    //}

     typedef std::unique_ptr<WrapperTransformer> WTPtr_t;
     std::vector<WTPtr_t> WrapperTransformers;
diff --git a/src/interpreter/cling/lib/Interpreter/BackendPasses.cpp b/src/interpreter/cling/lib/Interpreter/BackendPasses.cpp
index cb3308c360..873bc682ea 100644
--- a/src/interpreter/cling/lib/Interpreter/BackendPasses.cpp
+++ b/src/interpreter/cling/lib/Interpreter/BackendPasses.cpp
@@ -158,6 +158,9 @@ void BackendPasses::CreatePasses(llvm::Module& M, int OptLevel)
     // Inlining = CGOpts.NoInlining;
   }

+// force normal inlining (as above says: NoInlining is kills)
+  const_cast<CodeGenOptions&>(m_CGOpts).setInlining(CodeGenOptions::NormalInlining);
+
   llvm::PassManagerBuilder PMBuilder;
   PMBuilder.OptLevel = OptLevel;
   PMBuilder.SizeLevel = m_CGOpts.OptimizeSize;
diff --git a/interpreter/cling/CMakeLists.txt b/interpreter/cling/CMakeLists.txt
index dae7bedffa..4a33af4d6d 100644
--- a/src/interpreter/cling/CMakeLists.txt
+++ b/src/interpreter/cling/CMakeLists.txt
@@ -323,6 +323,12 @@ macro(add_cling_library name)
 
   llvm_add_library(${name} ${ARG_ENABLE_SHARED} ${ARG_UNPARSED_ARGUMENTS} ${srcs})
 
+  if (MSVC AND ( CMAKE_BUILD_TYPE STREQUAL "Release" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo") )
+    if (NOT ARG_SHARED)
+       target_compile_definitions(obj.${name} PRIVATE NDEBUG)
+    endif()
+  endif()
+
   if (MSVC AND cling_ex_file_match)
     # /EHs because cling_runtime_internal_throwIfInvalidPointer is extern “C”
     if (cling_ex_file_match)
diff --git a/interpreter/llvm/src/cmake/modules/AddLLVM.cmake b/interpreter/llvm/src/cmake/modules/AddLLVM.cmake
index e60c253fdf..f8ba7d0252 100644
--- a/src/interpreter/llvm/src/cmake/modules/AddLLVM.cmake
+++ b/src/interpreter/llvm/src/cmake/modules/AddLLVM.cmake
@@ -439,6 +439,10 @@ function(llvm_add_library name)
     add_library(${name} STATIC ${ALL_FILES})
   endif()
 
+  if (MSVC AND ( CMAKE_BUILD_TYPE STREQUAL "Release" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo") )
+    target_compile_definitions(${name} PRIVATE NDEBUG)
+  endif()
+
   setup_dependency_debugging(${name} ${LLVM_COMMON_DEPENDS})
 
   if(DEFINED windows_resource_file)
