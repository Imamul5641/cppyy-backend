diff --git a/src/interpreter/cling/lib/Interpreter/CIFactory.cpp b/src/interpreter/cling/lib/Interpreter/CIFactory.cpp
index f97c86032f..69321c5579 100644
--- a/src/interpreter/cling/lib/Interpreter/CIFactory.cpp
+++ b/src/interpreter/cling/lib/Interpreter/CIFactory.cpp
@@ -1564,7 +1564,7 @@ static void stringifyPreprocSetting(PreprocessorOptions& PPOpts,
     // FIXME: We have a bug when we switch to -O2, for some cases it takes
     // several minutes to optimize, while the same code compiled by clang -O2
     // takes only a few seconds.
-    CGOpts.OptimizationLevel = 0;
+    CGOpts.OptimizationLevel = 2;
     // Taken from a -O2 run of clang:
     CGOpts.DiscardValueNames = 1;
     CGOpts.OmitLeafFramePointer = 1;
diff --git a/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp b/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
index 56692341b5..c21854e757 100644
--- a/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
+++ b/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
@@ -912,7 +912,7 @@ namespace cling {
     std::vector<ASTTPtr_t> ASTTransformers;
     ASTTransformers.emplace_back(new AutoSynthesizer(TheSema));
     ASTTransformers.emplace_back(new EvaluateTSynthesizer(TheSema));
-    if (hasCodeGenerator() && !m_Interpreter->getOptions().NoRuntime) {
+    if (0 && hasCodeGenerator() && !m_Interpreter->getOptions().NoRuntime) {
       // Don't protect against crashes if we cannot run anything.
       // cling might also be in a PCH-generation mode; don't inject our Sema
       // pointer into the PCH.
diff --git a/src/interpreter/cling/lib/Interpreter/BackendPasses.cpp b/src/interpreter/cling/lib/Interpreter/BackendPasses.cpp
index cb3308c360..873bc682ea 100644
--- a/src/interpreter/cling/lib/Interpreter/BackendPasses.cpp
+++ b/src/interpreter/cling/lib/Interpreter/BackendPasses.cpp
@@ -158,6 +158,9 @@ void BackendPasses::CreatePasses(llvm::Module& M, int OptLevel)
     // Inlining = CGOpts.NoInlining;
   }

+// force normal inlining (as above says: NoInlining is kills)
+  const_cast<CodeGenOptions&>(m_CGOpts).setInlining(CodeGenOptions::NormalInlining);
+
   llvm::PassManagerBuilder PMBuilder;
   PMBuilder.OptLevel = OptLevel;
   PMBuilder.SizeLevel = m_CGOpts.OptimizeSize;
