diff --git a/src/core/foundation/src/TClassEdit.cxx b/src/core/foundation/src/TClassEdit.cxx
index e841afd0b4..1607e49090 100644
--- a/src/core/foundation/src/TClassEdit.cxx
+++ b/src/core/foundation/src/TClassEdit.cxx
@@ -1492,14 +1492,14 @@ static void ResolveTypedefImpl(const char *tname,
                      result += "::";
                   }
                } else if (modified) {
-                  result += std::string(tname+prevScope,cursor+1-prevScope);
+                  result += std::string(tname+prevScope,cursor+2-prevScope);
                }
             } else if (!gInterpreterHelper->IsDeclaredScope(scope,isInlined)) {
-               // the nesting namespace is not declared
-               if (modified) result += (tname+prevScope);
+               // the nesting namespace is not declared, just ignore it and move on
+               if (modified) result += std::string(tname+prevScope,cursor+1-prevScope);
                // Unfortunately, this is too harsh .. what about:
                //    unknown::wrapper<Int_t>
-               return;
+               //return;
             } else if (isInlined) {
                // humm ... just skip it.
                if (!modified) {
@@ -1510,7 +1510,7 @@ static void ResolveTypedefImpl(const char *tname,
                   result += string(tname,start_of_type,prevScope - start_of_type);
                }
             } else if (modified) {
-               result += std::string(tname+prevScope,cursor+1-prevScope);
+               result += std::string(tname+prevScope,cursor+2-prevScope);
             }
             // Consume the 1st semi colon, the 2nd will be consume by the for loop.
             ++cursor;
