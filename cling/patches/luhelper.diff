diff --git a/src/interpreter/cling/lib/Interpreter/LookupHelper.cpp b/src/interpreter/cling/lib/Interpreter/LookupHelper.cpp
index 936da38f8895..6a72c199722f 100644
--- a/src/interpreter/cling/lib/Interpreter/LookupHelper.cpp
+++ b/src/interpreter/cling/lib/Interpreter/LookupHelper.cpp
@@ -1243,6 +1243,23 @@ namespace cling {
       ObjExprClassification = ObjExpr.Classify(Context);
     }
 
+    //
+    //  Tell the diagnostic engine to ignore all diagnostics.
+    //
+    bool OldSuppressAllDiagnostics
+      = S.getDiagnostics().getSuppressAllDiagnostics();
+    S.getDiagnostics().setSuppressAllDiagnostics(
+        diagOnOff == LookupHelper::NoDiagnostics);
+
+    struct ResetDiagSuppression {
+      bool _Old;
+      Sema& _S;
+      ResetDiagSuppression(Sema &S, bool Old): _Old(Old), _S(S) {}
+      ~ResetDiagSuppression() {
+        _S.getDiagnostics().setSuppressAllDiagnostics();
+      }
+    } DiagSuppressionRAII(S, OldSuppressAllDiagnostics);
+
     //
     //  Construct the overload candidate set.
     //
@@ -1324,17 +1341,8 @@ namespace cling {
           // of comparison.
           TheDecl = TheDecl->getCanonicalDecl();
           if (TheDecl->isTemplateInstantiation() && !TheDecl->isDefined()) {
-            //
-            //  Tell the diagnostic engine to ignore all diagnostics.
-            //
-            bool OldSuppressAllDiagnostics
-              = S.getDiagnostics().getSuppressAllDiagnostics();
-            S.getDiagnostics().setSuppressAllDiagnostics(
-                diagOnOff == LookupHelper::NoDiagnostics);
-
             S.InstantiateFunctionDefinition(SourceLocation(), TheDecl,
                                             true /*recursive instantiation*/);
-            S.getDiagnostics().setSuppressAllDiagnostics(OldSuppressAllDiagnostics);
           }
           if (TheDecl->isInvalidDecl()) {
             // if the decl is invalid try to clean up
