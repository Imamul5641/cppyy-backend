diff --git a/src/core/clingutils/CMakeLists.txt b/src/core/clingutils/CMakeLists.txt
index 4be71a05fb..b126c3d9b4 100644
--- a/src/core/clingutils/CMakeLists.txt
+++ b/src/core/clingutils/CMakeLists.txt
@@ -30,31 +30,31 @@ ROOT_INSTALL_HEADERS()
 
 #### STL dictionary (replacement for cintdlls)##############################
 
-set(stldicts
-    vector
-    list
-    forward_list
-    deque
-    map map2 unordered_map
-    multimap multimap2 unordered_multimap
-    set unordered_set
-    multiset unordered_multiset
-    complex)
-if(NOT WIN32)
-  list(APPEND stldicts valarray)
-endif()
-include_directories(${CMAKE_BINARY_DIR}/etc/cling/cint)
-foreach(dict ${stldicts})
-  string(REPLACE "2" "" header ${dict})
-  string(REPLACE "complex" "root_std_complex.h" header ${header})
-  string(REPLACE "multi" "" header ${header})
-  ROOT_STANDARD_LIBRARY_PACKAGE(${dict}Dict
-                                NO_SOURCES NO_INSTALL_HEADERS NO_MODULE
-                                STAGE1
-                                HEADERS ${header}
-                                LINKDEF src/${dict}Linkdef.h
-                                DEPENDENCIES Core)
-endforeach()
+#set(stldicts
+#    vector
+#    list
+#    forward_list
+#    deque
+#    map map2 unordered_map
+#    multimap multimap2 unordered_multimap
+#    set unordered_set
+#    multiset unordered_multiset
+#    complex)
+#if(NOT WIN32)
+#  list(APPEND stldicts valarray)
+#endif()
+#include_directories(${CMAKE_BINARY_DIR}/etc/cling/cint)
+#foreach(dict ${stldicts})
+#  string(REPLACE "2" "" header ${dict})
+#  string(REPLACE "complex" "root_std_complex.h" header ${header})
+#  string(REPLACE "multi" "" header ${header})
+#  ROOT_STANDARD_LIBRARY_PACKAGE(${dict}Dict
+#                                NO_SOURCES NO_INSTALL_HEADERS NO_MODULE
+#                                STAGE1
+#                                HEADERS ${header}
+#                                LINKDEF src/${dict}Linkdef.h
+#                                DEPENDENCIES Core)
+#endforeach()
 
 set(CLANG_RESOURCE_DIR_STEM)
 set(CLANG_RESOURCE_DIR_VERSION)
diff --git a/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp b/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
index 2593c21fb2..dbe8caa04b 100644
--- a/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
+++ b/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
@@ -90,20 +90,7 @@ namespace {
       "  Failed to extract C++ standard library version.\n";
     }
 
-    if (CLING_CXXABI_BACKWARDCOMP && CurABI < CLING_CXXABI_VERS) {
-       // Backward compatible ABIs allow us to interpret old headers
-       // against a newer stdlib.so.
-       return true;
-    }
-
-    cling::errs() <<
-      "Warning in cling::IncrementalParser::CheckABICompatibility():\n"
-      "  Possible C++ standard library mismatch, compiled with "
-      << CLING_CXXABI_NAME << " '" << CLING_CXXABI_VERS << "'\n"
-      "  Extraction of runtime standard library version was: '"
-      << CurABI << "'\n";
-
-    return false;
+    return true;
   }
 
   class FilteringDiagConsumer : public cling::utils::DiagnosticsOverride {
diff --git a/src/interpreter/cling/lib/Interpreter/CIFactory.cpp b/src/interpreter/cling/lib/Interpreter/CIFactory.cpp
index ad1cc34de7..f78875e70b 100644
--- a/src/interpreter/cling/lib/Interpreter/CIFactory.cpp
+++ b/src/interpreter/cling/lib/Interpreter/CIFactory.cpp
@@ -57,20 +57,13 @@ using namespace clang;
 using namespace cling;
 
 namespace {
-  static constexpr unsigned CxxStdCompiledWith() {
+  static unsigned CxxStdCompiledWith() {
     // The value of __cplusplus in GCC < 5.0 (e.g. 4.9.3) when
     // either -std=c++1y or -std=c++14 is specified is 201300L, which fails
     // the test for C++14 or more (201402L) as previously specified.
     // I would claim that the check should be relaxed to:
-#if __cplusplus > 201402L
+    if (getenv("MANYLINUX_BUILD")) return 11;
     return 17;
-#elif __cplusplus > 201103L || (defined(LLVM_ON_WIN32) && _MSC_VER >= 1900)
-    return 14;
-#elif __cplusplus >= 201103L
-    return 11;
-#else
-#error "Unknown __cplusplus version"
-#endif
   }
 
   // This function isn't referenced outside its translation unit, but it
diff --git a/src/config/RConfigure.in b/src/config/RConfigure.in
index e8210e2f65..63b2a8dc99 100644
--- a/src/config/RConfigure.in
+++ b/src/config/RConfigure.in
@@ -59,4 +59,64 @@
 #@hastmvacpu@ R__HAS_TMVACPU /**/
 #@hastmvagpu@ R__HAS_TMVAGPU /**/
 
+#if __cplusplus > 201402L
+#ifndef R__USE_CXX17
+#define R__USE_CXX17
+#endif
+#ifdef R__USE_CXX14
+#undef R__USE_CXX14
+#endif
+#ifdef R__USE_CXX11
+#undef R__USE_CXX11
+#endif
+
+#ifndef R__HAS_STD_STRING_VIEW
+#define R__HAS_STD_STRING_VIEW
+#endif
+#ifdef R__HAS_STD_EXPERIMENTAL_STRING_VIEW
+#undef R__HAS_STD_EXPERIMENTAL_STRING_VIEW
+#endif
+#ifdef R__HAS_STOD_STRING_VIEW
+#undef R__HAS_STOD_STRING_VIEW
+#endif
+
+#ifndef R__HAS_STD_INVOKE
+#define R__HAS_STD_INVOKE
+#endif
+#ifndef R__HAS_STD_APPLY
+#define R__HAS_STD_APPLY
+#endif
+
+#ifndef R__HAS_STD_INDEX_SEQUENCE
+#define R__HAS_STD_INDEX_SEQUENCE
+#endif
+
+#elif __cplusplus > 201103L
+#ifdef R__USE_CXX17
+#undef R__USE_CXX17
+#endif
+#ifndef R__USE_CXX14
+#define R__USE_CXX14
+#endif
+#ifdef R__USE_CXX11
+#undef R__USE_CXX11
+#endif
+
+#ifndef R__HAS_STD_INDEX_SEQUENCE
+#define R__HAS_STD_INDEX_SEQUENCE
+#endif
+
+#else
+#ifdef R__USE_CXX17
+#undef R__USE_CXX17
+#endif
+#ifdef R__USE_CXX14
+#undef R__USE_CXX14
+#endif
+#ifndef R__USE_CXX11
+#define R__USE_CXX11
+#endif
+
+#endif
+
 #endif
