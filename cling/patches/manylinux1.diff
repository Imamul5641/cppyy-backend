diff --git a/src/core/clingutils/CMakeLists.txt b/src/core/clingutils/CMakeLists.txt
index 4be71a05fb..b126c3d9b4 100644
--- a/src/core/clingutils/CMakeLists.txt
+++ b/src/core/clingutils/CMakeLists.txt
@@ -30,31 +30,31 @@ ROOT_INSTALL_HEADERS()
 
 #### STL dictionary (replacement for cintdlls)##############################
 
-set(stldicts
-    vector
-    list
-    forward_list
-    deque
-    map map2 unordered_map
-    multimap multimap2 unordered_multimap
-    set unordered_set
-    multiset unordered_multiset
-    complex)
-if(NOT WIN32)
-  list(APPEND stldicts valarray)
-endif()
-include_directories(${CMAKE_BINARY_DIR}/etc/cling/cint)
-foreach(dict ${stldicts})
-  string(REPLACE "2" "" header ${dict})
-  string(REPLACE "complex" "root_std_complex.h" header ${header})
-  string(REPLACE "multi" "" header ${header})
-  ROOT_STANDARD_LIBRARY_PACKAGE(${dict}Dict
-                                NO_SOURCES NO_INSTALL_HEADERS NO_MODULE
-                                STAGE1
-                                HEADERS ${header}
-                                LINKDEF src/${dict}Linkdef.h
-                                DEPENDENCIES Core)
-endforeach()
+#set(stldicts
+#    vector
+#    list
+#    forward_list
+#    deque
+#    map map2 unordered_map
+#    multimap multimap2 unordered_multimap
+#    set unordered_set
+#    multiset unordered_multiset
+#    complex)
+#if(NOT WIN32)
+#  list(APPEND stldicts valarray)
+#endif()
+#include_directories(${CMAKE_BINARY_DIR}/etc/cling/cint)
+#foreach(dict ${stldicts})
+#  string(REPLACE "2" "" header ${dict})
+#  string(REPLACE "complex" "root_std_complex.h" header ${header})
+#  string(REPLACE "multi" "" header ${header})
+#  ROOT_STANDARD_LIBRARY_PACKAGE(${dict}Dict
+#                                NO_SOURCES NO_INSTALL_HEADERS NO_MODULE
+#                                STAGE1
+#                                HEADERS ${header}
+#                                LINKDEF src/${dict}Linkdef.h
+#                                DEPENDENCIES Core)
+#endforeach()
 
 set(CLANG_RESOURCE_DIR_STEM)
 set(CLANG_RESOURCE_DIR_VERSION)
diff --git a/src/main/CMakeLists.txt b/src/main/CMakeLists.txt
index 32094d55bd..30d55635b1 100644
--- a/src/main/CMakeLists.txt
+++ b/src/main/CMakeLists.txt
@@ -78,7 +78,7 @@ ROOT_EXECUTABLE(rootcling src/rootcling.cxx
 # rootcling includes the ROOT complex header which would build the complex
 # dictionary with modules. To make sure that rootcling_stage1 builds this
 # dict before we use it, we add a dependency here.
-add_dependencies(rootcling complexDict)
+#add_dependencies(rootcling complexDict)
 
 target_include_directories(rootcling PRIVATE
         ${CMAKE_CURRENT_SOURCE_DIR}/../core/metacling/res
diff --git a/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp b/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
index 2593c21fb2..dbe8caa04b 100644
--- a/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
+++ b/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp
@@ -90,20 +90,7 @@ namespace {
       "  Failed to extract C++ standard library version.\n";
     }
 
-    if (CLING_CXXABI_BACKWARDCOMP && CurABI < CLING_CXXABI_VERS) {
-       // Backward compatible ABIs allow us to interpret old headers
-       // against a newer stdlib.so.
-       return true;
-    }
-
-    cling::errs() <<
-      "Warning in cling::IncrementalParser::CheckABICompatibility():\n"
-      "  Possible C++ standard library mismatch, compiled with "
-      << CLING_CXXABI_NAME << " '" << CLING_CXXABI_VERS << "'\n"
-      "  Extraction of runtime standard library version was: '"
-      << CurABI << "'\n";
-
-    return false;
+    return true;
   }
 
   class FilteringDiagConsumer : public cling::utils::DiagnosticsOverride {
