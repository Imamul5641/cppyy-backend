diff --git a/src/build/win/w32pragma.h b/src/build/win/w32pragma.h
index c21debefd4..20be10a19d 100644
--- a/src/build/win/w32pragma.h
+++ b/src/build/win/w32pragma.h
@@ -59,12 +59,24 @@
 /* loop control variable is used outside the for-loop scope */
 #pragma warning (3: 4289)
 
-#define WIN32 1
-#define _WINDOWS 1
-#define WINVER 0x0500
+/* possible loss of data with integer conversion (most are irrelevant) */
+#pragma warning (disable: 4267)
+
+/* unary - to unsigned type */
+#pragma warning (disable: 4146)
+
+/* function type cast truncation */
+#pragma warning (error: 4302)
+
+/* type case to larger type */
+#pragma warning (error:4312)
+
+//#define WIN32 1
+//#define _WINDOWS 1
+//#define WINVER 0x0500
 #define CRTAPI1 _cdecl 
 #define CRTAPI2 _cdecl
-#define _X86_ 1 
+//#define _X86_ 1 
 // #define _DLL  - used to be explicitly defined, 
 // but it's implicitely defined via /MD(d)
 #define G__REDIRECTIO 1
diff --git a/src/cmake/modules/SetUpWindows.cmake b/src/cmake/modules/SetUpWindows.cmake
index ae7830febb..aa30c4b5d8 100644
--- a/src/cmake/modules/SetUpWindows.cmake
+++ b/src/cmake/modules/SetUpWindows.cmake
@@ -29,6 +29,12 @@ if(CMAKE_COMPILER_IS_GNUCXX)
   set(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS}")
   set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS}")
 elseif(MSVC)
+  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
+     set(WIN_EXTRA_DEFS "-D_WINDOWS -DWIN32 -D_AMD64_")
+  elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
+     set(WIN_EXTRA_DEFS "-D_WINDOWS -DWIN32 -D_X86_")
+  endif()
+
   set(ROOT_ARCHITECTURE win32)
 
   math(EXPR VC_MAJOR "${MSVC_VERSION} / 100")
@@ -43,13 +51,13 @@ elseif(MSVC)
   endif()
 
   if(CMAKE_PROJECT_NAME STREQUAL ROOT)
-    set(CMAKE_CXX_FLAGS "-nologo -I${CMAKE_SOURCE_DIR}/build/win -FIw32pragma.h -FIsehmap.h ${BLDCXXFLAGS} -EHsc- -W3 -wd4141 -wd4291 -wd4244 -wd4049 -D_WIN32 -D_XKEYCHECK_H -D_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS")
-    set(CMAKE_C_FLAGS   "-nologo -I${CMAKE_SOURCE_DIR}/build/win -FIw32pragma.h -FIsehmap.h ${BLDCFLAGS} -EHsc- -W3 -D_WIN32 -D_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER -DNOMINMAX")
+    set(CMAKE_CXX_FLAGS "-nologo -I${CMAKE_SOURCE_DIR}/build/win -FIw32pragma.h -FIsehmap.h ${BLDCXXFLAGS} ${WIN_EXTRA_DEFS} -EHsc- -W3 -wd4141 -wd4291 -wd4244 -wd4049 -D_XKEYCHECK_H -D_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS")
+    set(CMAKE_C_FLAGS   "-nologo -I${CMAKE_SOURCE_DIR}/build/win -FIw32pragma.h -FIsehmap.h ${BLDCFLAGS} ${WIN_EXTRA_DEFS} -EHsc- -W3 -D_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER -DNOMINMAX")
     install(FILES ${CMAKE_SOURCE_DIR}/build/win/w32pragma.h  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers)
     install(FILES ${CMAKE_SOURCE_DIR}/build/win/sehmap.h  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers)
   else()
-    set(CMAKE_CXX_FLAGS "-nologo -FIw32pragma.h -FIsehmap.h ${BLDCXXFLAGS} -EHsc- -W3 -wd4244 -D_WIN32")
-    set(CMAKE_C_FLAGS   "-nologo -FIw32pragma.h -FIsehmap.h ${BLDCFLAGS} -EHsc- -W3 -D_WIN32")
+    set(CMAKE_CXX_FLAGS "-nologo -FIw32pragma.h -FIsehmap.h ${BLDCXXFLAGS} ${WIN_EXTRA_DEFS} -EHsc- -W3 -wd4244")
+    set(CMAKE_C_FLAGS   "-nologo -FIw32pragma.h -FIsehmap.h ${BLDCFLAGS} ${WIN_EXTRA_DEFS} -EHsc- -W3")
   endif()
 
   #---Select compiler flags----------------------------------------------------------------
diff --git a/src/interpreter/CMakeLists.txt b/src/interpreter/CMakeLists.txt
index 3752a6e423..40b2cf2a81 100644
--- a/src/interpreter/CMakeLists.txt
+++ b/src/interpreter/CMakeLists.txt
@@ -82,6 +82,8 @@ elseif(ROOT_ARCHITECTURE MATCHES macosx)
   set(ROOT_CLING_TARGET "X86")
 elseif(ROOT_ARCHITECTURE MATCHES win32)
   set(ROOT_CLING_TARGET "X86")
+elseif(ROOT_ARCHITECTURE MATCHES win64)
+  set(ROOT_CLING_TARGET "X86")
 else()
   set(ROOT_CLING_TARGET "all")
 endif()
diff --git a/src/core/metacling/src/CMakeLists.txt b/src/core/metacling/src/CMakeLists.txt
index 5ef8d28c86..483ba33620 100644
--- a/src/core/metacling/src/CMakeLists.txt
+++ b/src/core/metacling/src/CMakeLists.txt
@@ -90,7 +90,20 @@ ROOT_LINKER_LIBRARY(Cling
 
 if(MSVC)
   set_target_properties(Cling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
-  set(cling_exports
+  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
+    set(cling_exports
+      __std_terminate
+      cling_runtime_internal_throwIfInvalidPointer
+      ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00D@Z
+      ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00DM@Z
+      ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00DN@Z
+      ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00DO@Z
+      ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00DPEBX@Z
+      ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00D_K@Z
+      ?setValueWithAlloc@internal@runtime@cling@@YAPEAXPEAX00D@Z
+    )
+  elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
+    set(cling_exports
       __std_terminate
       ??2@YAPAXI@Z
       ??3@YAXPAX@Z
@@ -128,7 +141,8 @@ if(MSVC)
       ?printValue@cling@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBV23@@Z
       ??$toUTF8@D@cling@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBDID@Z
       ?EvaluateDynamicExpression@internal@runtime@cling@@YA?AVValue@3@PAVInterpreter@3@PAVDynamicExprInfo@123@PAVDeclContext@clang@@@Z
-  )
+    )
+  endif()
   if(MSVC_VERSION LESS 1914)
     set(cling_exports ${cling_exports} ??3@YAXPAX0@Z ??_V@YAXPAX0@Z)
   endif()
diff --git a/src/core/base/inc/ROOT/RConfig.h b/src/core/base/inc/ROOT/RConfig.h
index 60094b8764..8a62e6ffee 100644
--- a/src/core/base/inc/ROOT/RConfig.hxx
+++ b/src/core/base/inc/ROOT/RConfig.hxx
@@ -375,7 +375,15 @@
 #   endif
 #endif
 
-#ifdef _WIN32
+#ifdef _WIN64
+#   define R__WIN64
+#   define R__WIN32
+#   ifndef WIN32
+#      define WIN32
+#   endif
+#   define R__BYTESWAP
+#   define R__ACCESS_IN_SYMBOL
+#elif _WIN32
 #   define R__WIN32
 #   ifndef WIN32
 #      define WIN32
diff --git a/src/core/base/inc/TROOT.h b/src/core/base/inc/TROOT.h
index 0c3fe6f097..5a8636a5b9 100644
--- a/src/core/base/inc/TROOT.h
+++ b/src/core/base/inc/TROOT.h
@@ -304,9 +304,15 @@ public:
    TCanvas          *MakeDefCanvas() const;
    void              Message(Int_t id, const TObject *obj);
    Bool_t            MustClean() const { return fMustClean; }
+#ifdef _WIN64
+   Long64_t          ProcessLine(const char *line, Int_t *error = 0);
+   Long64_t          ProcessLineSync(const char *line, Int_t *error = 0);
+   Long64_t          ProcessLineFast(const char *line, Int_t *error = 0);
+#else
    Long_t            ProcessLine(const char *line, Int_t *error = 0);
    Long_t            ProcessLineSync(const char *line, Int_t *error = 0);
    Long_t            ProcessLineFast(const char *line, Int_t *error = 0);
+#endif
    Bool_t            ReadingObject() const;
    void              RecursiveRemove(TObject *obj);
    void              RefreshBrowsers();
diff --git a/src/core/base/inc/TString.h b/src/core/base/inc/TString.h
index 31069a5f36..ee5a3ab3da 100644
--- a/src/core/base/inc/TString.h
+++ b/src/core/base/inc/TString.h
@@ -33,6 +33,8 @@
 #include <stdio.h>
 #include <string>
 
+inline Ssiz_t R__strlen(const char* s) { return (Ssiz_t)strlen(s); }
+
 class TRegexp;
 class TPRegexp;
 class TString;
@@ -533,7 +535,7 @@ operator+(T i, const TString &s)
     char buffer[32];
     // coverity[secure_coding] Buffer is large enough (2^64 = 20 digits).
     snprintf(buffer, sizeof(buffer), "%lld", static_cast<Long64_t>(i));
-    return TString(buffer, strlen(buffer), s.Data(), s.Length());
+    return TString(buffer, R__strlen(buffer), s.Data(), s.Length());
 }
 
 template<class T>
@@ -543,7 +545,7 @@ operator+(T u, const TString &s)
     char buffer[32];
     // coverity[secure_coding] Buffer is large enough (2^64 = 20 digits).
     snprintf(buffer, sizeof(buffer), "%llu", static_cast<ULong64_t>(u));
-    return TString(buffer, strlen(buffer), s.Data(), s.Length());
+    return TString(buffer, R__strlen(buffer), s.Data(), s.Length());
 }
 
 template<class T>
@@ -553,11 +555,11 @@ operator+(T f, const TString &s)
     char buffer[32];
     // coverity[secure_coding] Buffer is large enough: width specified in format
     snprintf(buffer, sizeof(buffer), "%.17Lg", static_cast<LongDouble_t>(f));
-    return TString(buffer, strlen(buffer), s.Data(), s.Length());
+    return TString(buffer, R__strlen(buffer), s.Data(), s.Length());
 }
 
 inline TString &TString::Append(const char *cs)
-{ return Replace(Length(), 0, cs, cs ? strlen(cs) : 0); }
+{ return Replace(Length(), 0, cs, cs ? R__strlen(cs) : 0); }
 
 inline TString &TString::Append(const char *cs, Ssiz_t n)
 { return Replace(Length(), 0, cs, n); }
@@ -569,7 +571,7 @@ inline TString &TString::Append(const TString &s, Ssiz_t n)
 { return Replace(Length(), 0, s.Data(), TMath::Min(n, s.Length())); }
 
 inline TString &TString::operator+=(const char *cs)
-{ return Append(cs, cs ? strlen(cs) : 0); }
+{ return Append(cs, Ssiz_t(cs ? R__strlen(cs) : 0)); }
 
 inline TString &TString::operator+=(const TString &s)
 { return Append(s.Data(), s.Length()); }
@@ -608,7 +610,7 @@ inline typename std::enable_if<ROOT::TypeTraits::IsFloatNumeral<T>::value,TStrin
 }
 
 inline Bool_t TString::BeginsWith(const char *s, ECaseCompare cmp) const
-{ return Index(s, s ? strlen(s) : (Ssiz_t)0, (Ssiz_t)0, cmp) == 0; }
+{ return Index(s, s ? R__strlen(s) : (Ssiz_t)0, (Ssiz_t)0, cmp) == 0; }
 
 inline Bool_t TString::BeginsWith(const TString &pat, ECaseCompare cmp) const
 { return Index(pat.Data(), pat.Length(), (Ssiz_t)0, cmp) == 0; }
@@ -617,7 +619,7 @@ inline Bool_t TString::Contains(const TString &pat, ECaseCompare cmp) const
 { return Index(pat.Data(), pat.Length(), (Ssiz_t)0, cmp) != kNPOS; }
 
 inline Bool_t TString::Contains(const char *s, ECaseCompare cmp) const
-{ return Index(s, s ? strlen(s) : 0, (Ssiz_t)0, cmp) != kNPOS; }
+{ return Index(s, s ? R__strlen(s) : 0, (Ssiz_t)0, cmp) != kNPOS; }
 
 inline Bool_t TString::Contains(const TRegexp &pat) const
 { return Index(pat, (Ssiz_t)0) != kNPOS; }
@@ -632,7 +634,7 @@ inline Bool_t TString::EqualTo(const TString &st, ECaseCompare cmp) const
 { return (CompareTo(st, cmp) == 0) ? kTRUE : kFALSE; }
 
 inline Ssiz_t TString::Index(const char *s, Ssiz_t i, ECaseCompare cmp) const
-{ return Index(s, s ? strlen(s) : 0, i, cmp); }
+{ return Index(s, s ? R__strlen(s) : 0, i, cmp); }
 
 inline Ssiz_t TString::Index(const TString &s, Ssiz_t i, ECaseCompare cmp) const
 { return Index(s.Data(), s.Length(), i, cmp); }
@@ -642,7 +644,7 @@ inline Ssiz_t TString::Index(const TString &pat, Ssiz_t patlen, Ssiz_t i,
 { return Index(pat.Data(), patlen, i, cmp); }
 
 inline TString &TString::Insert(Ssiz_t pos, const char *cs)
-{ return Replace(pos, 0, cs, cs ? strlen(cs) : 0); }
+{ return Replace(pos, 0, cs, cs ? R__strlen(cs) : 0); }
 
 inline TString &TString::Insert(Ssiz_t pos, const char *cs, Ssiz_t n)
 { return Replace(pos, 0, cs, n); }
@@ -654,7 +656,7 @@ inline TString &TString::Insert(Ssiz_t pos, const TString &s, Ssiz_t n)
 { return Replace(pos, 0, s.Data(), TMath::Min(n, s.Length())); }
 
 inline TString &TString::Prepend(const char *cs)
-{ return Replace(0, 0, cs, cs ? strlen(cs) : 0); }
+{ return Replace(0, 0, cs, cs ? R__strlen(cs) : 0); }
 
 inline TString &TString::Prepend(const char *cs, Ssiz_t n)
 { return Replace(0, 0, cs, n); }
@@ -675,7 +677,7 @@ inline TString &TString::Chop()
 { return Remove(TMath::Max(0, Length()-1)); }
 
 inline TString &TString::Replace(Ssiz_t pos, Ssiz_t n, const char *cs)
-{ return Replace(pos, n, cs, cs ? strlen(cs) : 0); }
+{ return Replace(pos, n, cs, cs ? R__strlen(cs) : 0); }
 
 inline TString &TString::Replace(Ssiz_t pos, Ssiz_t n, const TString& s)
 { return Replace(pos, n, s.Data(), s.Length()); }
@@ -688,13 +690,13 @@ inline TString &TString::ReplaceAll(const TString &s1, const TString &s2)
 { return ReplaceAll(s1.Data(), s1.Length(), s2.Data(), s2.Length()) ; }
 
 inline TString &TString::ReplaceAll(const TString &s1, const char *s2)
-{ return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? strlen(s2) : 0); }
+{ return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? R__strlen(s2) : 0); }
 
 inline TString &TString::ReplaceAll(const char *s1, const TString &s2)
-{ return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2.Data(), s2.Length()); }
+{ return ReplaceAll(s1, s1 ? R__strlen(s1) : 0, s2.Data(), s2.Length()); }
 
 inline TString &TString::ReplaceAll(const char *s1,const char *s2)
-{ return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2, s2 ? strlen(s2) : 0); }
+{ return ReplaceAll(s1, s1 ? R__strlen(s1) : 0, s2, s2 ? R__strlen(s2) : 0); }
 
 inline TString &TString::Swap(TString &other) {
    // Swap the contents of other and this without reallocation.
diff --git a/src/core/meta/inc/TStreamerElement.h b/src/core/meta/inc/TStreamerElement.h
index 248e86528d..0ba896fe2e 100644
--- a/src/core/meta/inc/TStreamerElement.h
+++ b/src/core/meta/inc/TStreamerElement.h
@@ -111,7 +111,7 @@ public:
    virtual const char *GetFullName() const;
    virtual const char *GetInclude() const {return "";}
    Int_t            GetMaxIndex(Int_t i) const {return fMaxIndex[i];}
-   virtual ULong_t  GetMethod() const {return ULong_t(fStreamer);}
+   virtual uintptr_t GetMethod() const {return (uintptr_t)fStreamer;}
    TMemberStreamer *GetStreamer() const;
    virtual Int_t    GetSize() const;
    Int_t            GetNewType() const {return fNewType;}
@@ -177,7 +177,7 @@ public:
    const char      *GetErrorMessage() const { return fErrorMsg; }
    const char      *GetInclude() const;
    TClass          *GetNewBaseClass() { return fNewBaseClass; }
-   ULong_t          GetMethod() const {return 0;}
+   uintptr_t        GetMethod() const {return 0;}
    Int_t            GetSize() const;
    TVirtualStreamerInfo *GetBaseStreamerInfo () const { return fStreamerInfo; }
    virtual void     Init(TVirtualStreamerInfo *obj=0);
@@ -217,7 +217,7 @@ public:
    const char    *GetCountClass()   const {return fCountClass.Data();}
    const char    *GetCountName()    const {return fCountName.Data();}
    Int_t          GetCountVersion() const {return fCountVersion;}
-   ULong_t        GetMethod() const;
+   uintptr_t      GetMethod() const;
    Int_t          GetSize() const;
    virtual void   Init(TVirtualStreamerInfo *obj=0);
    virtual Bool_t HasCounter() const                {return fCounter!=0;   }
@@ -253,7 +253,7 @@ public:
    const char    *GetCountName()    const {return fCountName.Data();}
    Int_t          GetCountVersion() const {return fCountVersion;}
    const char    *GetInclude() const;
-   ULong_t        GetMethod() const;
+   uintptr_t      GetMethod() const;
    Int_t          GetSize() const;
    virtual void   Init(TVirtualStreamerInfo *obj=0);
    virtual Bool_t IsaPointer() const                {return kTRUE;         }
@@ -282,7 +282,7 @@ public:
    virtual       ~TStreamerBasicType();
    TClass        *GetClassPointer() const { return 0; }
    Int_t          GetCounter() const {return fCounter;}
-   ULong_t        GetMethod() const;
+   uintptr_t      GetMethod() const;
    Int_t          GetSize() const;
    virtual void   Update(const TClass * /* oldClass */, TClass * /* newClass */) {}

diff --git a/src/core/meta/src/TStreamerElement.cxx b/src/core/meta/src/TStreamerElement.cxx
index 55b2cfbb8c..514d21b006 100644
--- a/src/core/meta/src/TStreamerElement.cxx
+++ b/src/core/meta/src/TStreamerElement.cxx
@@ -918,7 +918,7 @@ TStreamerBasicPointer::~TStreamerBasicPointer()
 ////////////////////////////////////////////////////////////////////////////////
 /// return offset of counter
 
-ULong_t TStreamerBasicPointer::GetMethod() const
+uintptr_t TStreamerBasicPointer::GetMethod() const
 {
    if (!fCounter) ((TStreamerBasicPointer*)this)->Init();
    if (!fCounter) return 0;
@@ -927,7 +927,7 @@ ULong_t TStreamerBasicPointer::GetMethod() const
    // the left most (non virtual) base classes.  For the other we would
    // really need to use the object coming from the list of real data.
    // (and even that need analysis for virtual base class).
-   return (ULong_t)fCounter->GetOffset();
+   return (uintptr_t)fCounter->GetOffset();
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -1027,14 +1027,14 @@ TStreamerLoop::~TStreamerLoop()
 ////////////////////////////////////////////////////////////////////////////////
 /// return address of counter
 
-ULong_t TStreamerLoop::GetMethod() const
+uintptr_t TStreamerLoop::GetMethod() const
 {
    //if (!fCounter) {
    //   Init();
    //   if (!fCounter) return 0;
    //}
    if (!fCounter) return 0;
-   return (ULong_t)fCounter->GetOffset();
+   return (uintptr_t)fCounter->GetOffset();
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -1127,10 +1127,10 @@ TStreamerBasicType::~TStreamerBasicType()
 ////////////////////////////////////////////////////////////////////////////////
 /// return address of counter
 
-ULong_t TStreamerBasicType::GetMethod() const
+uintptr_t TStreamerBasicType::GetMethod() const
 {
    if (fType ==  TVirtualStreamerInfo::kCounter ||
-       fType == (TVirtualStreamerInfo::kCounter+TVirtualStreamerInfo::kSkip)) return (ULong_t)&fCounter;
+       fType == (TVirtualStreamerInfo::kCounter+TVirtualStreamerInfo::kSkip)) return (uintptr_t)&fCounter;
    return 0;
 }
 
diff --git a/src/core/meta/inc/TInterpreter.h b/src/core/meta/inc/TInterpreter.h
index 6e2638abcf..f57c313930 100644
--- a/src/core/meta/inc/TInterpreter.h
+++ b/src/core/meta/inc/TInterpreter.h
@@ -173,8 +173,13 @@ public:
    virtual Int_t    ReloadAllSharedLibraryMaps() = 0;
    virtual Int_t    UnloadAllSharedLibraryMaps() = 0;
    virtual Int_t    UnloadLibraryMap(const char *library) = 0;
+#ifdef _WIN64
+   virtual Long64_t ProcessLine(const char *line, EErrorCode *error = 0) = 0;
+   virtual Long64_t ProcessLineSynch(const char *line, EErrorCode *error = 0) = 0;
+#else
    virtual Long_t   ProcessLine(const char *line, EErrorCode *error = 0) = 0;
    virtual Long_t   ProcessLineSynch(const char *line, EErrorCode *error = 0) = 0;
+#endif
    virtual void     PrintIntro() = 0;
    virtual void     RegisterModule(const char* /*modulename*/,
                                    const char** /*headers*/,
@@ -213,7 +218,11 @@ public:
    virtual ECheckClassInfo CheckClassInfo(const char *name, Bool_t autoload, Bool_t isClassOrNamespaceOnly = kFALSE) = 0;
 
    virtual Bool_t   CheckClassTemplate(const char *name) = 0;
+#ifdef _WIN64
+   virtual Long64_t Calc(const char *line, EErrorCode* error = 0) = 0;
+#else
    virtual Long_t   Calc(const char *line, EErrorCode* error = 0) = 0;
+#endif
    virtual void     CreateListOfBaseClasses(TClass *cl) const = 0;
    virtual void     CreateListOfDataMembers(TClass *cl) const = 0;
    virtual void     CreateListOfMethods(TClass *cl) const = 0;
@@ -342,13 +351,13 @@ public:
 
    void CallFunc_SetArg(CallFunc_t *func, void *arg)
    {
-      CallFunc_SetArg(func,(Long_t) arg);
+      CallFunc_SetArg(func,(intptr_t) arg);
    }
 
    template <typename T>
    void CallFunc_SetArg(CallFunc_t *func, const T *arg)
    {
-      CallFunc_SetArg(func,(Long_t) arg);
+      CallFunc_SetArg(func,(intptr_t) arg);
    }
 
    void CallFunc_SetArgImpl(CallFunc_t * /* func */)
@@ -452,7 +461,7 @@ public:
    virtual Bool_t DataMemberInfo_IsValid(DataMemberInfo_t * /* dminfo */) const {return 0;}
    virtual int    DataMemberInfo_MaxIndex(DataMemberInfo_t * /* dminfo */, Int_t  /* dim */) const {return 0;}
    virtual int    DataMemberInfo_Next(DataMemberInfo_t * /* dminfo */) const {return 0;}
-   virtual Long_t DataMemberInfo_Offset(DataMemberInfo_t * /* dminfo */) const {return 0;}
+   virtual intptr_t DataMemberInfo_Offset(DataMemberInfo_t * /* dminfo */) const {return 0;}
    virtual Long_t DataMemberInfo_Property(DataMemberInfo_t * /* dminfo */) const {return 0;}
    virtual Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t * /* dminfo */) const {return 0;}
    virtual int    DataMemberInfo_TypeSize(DataMemberInfo_t * /* dminfo */) const {return 0;}
diff --git a/src/core/metacling/src/TCling.h b/src/core/metacling/src/TCling.h
index 66a0dfe392..5f8a553de8 100644
--- a/src/core/metacling/src/TCling.h
+++ b/src/core/metacling/src/TCling.h
@@ -213,9 +213,15 @@ public: // Public Interface
    Int_t   ReloadAllSharedLibraryMaps();
    Int_t   UnloadAllSharedLibraryMaps();
    Int_t   UnloadLibraryMap(const char* library);
+#ifdef _WIN64
+   Long64_t  ProcessLine(const char* line, EErrorCode* error = 0);
+   Long64_t  ProcessLineAsynch(const char* line, EErrorCode* error = 0);
+   Long64_t  ProcessLineSynch(const char* line, EErrorCode* error = 0);
+#else
    Long_t  ProcessLine(const char* line, EErrorCode* error = 0);
    Long_t  ProcessLineAsynch(const char* line, EErrorCode* error = 0);
    Long_t  ProcessLineSynch(const char* line, EErrorCode* error = 0);
+#endif
    void    PrintIntro();
    void    RegisterModule(const char* modulename,
                           const char** headers,
@@ -250,7 +256,11 @@ public: // Public Interface
    ECheckClassInfo CheckClassInfo(const char *name, Bool_t autoload, Bool_t isClassOrNamespaceOnly = kFALSE);
 
    Bool_t  CheckClassTemplate(const char *name);
+#ifdef _WIN64
+   Long64_t  Calc(const char* line, EErrorCode* error = 0);
+#else
    Long_t  Calc(const char* line, EErrorCode* error = 0);
+#endif
    void    CreateListOfBaseClasses(TClass* cl) const;
    void    CreateListOfDataMembers(TClass* cl) const;
    void    CreateListOfMethods(TClass* cl) const;
@@ -445,7 +455,7 @@ public: // Public Interface
    virtual bool   DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const;
    virtual int    DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const;
    virtual int    DataMemberInfo_Next(DataMemberInfo_t* dminfo) const;
-   virtual Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const;
+   virtual intptr_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const;
    virtual Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const;
    virtual Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const;
    virtual int    DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const;
diff --git a/src/core/metacling/src/TCling.cxx b/src/core/metacling/src/TCling.cxx
index 5413aef378..c8fba08529 100644
--- a/src/core/metacling/src/TCling.cxx
+++ b/src/core/metacling/src/TCling.cxx
@@ -2177,7 +2194,12 @@ bool TCling::DiagnoseIfInterpreterException(const std::exception &e) const
 
 ////////////////////////////////////////////////////////////////////////////////
 
-Long_t TCling::ProcessLine(const char* line, EErrorCode* error/*=0*/)
+#ifdef _WIN64
+Long64_t
+#else
+Long_t
+#endif
+TCling::ProcessLine(const char* line, EErrorCode* error/*=0*/)
 {
    // Copy the passed line, it comes from a static buffer in TApplication
    // which can be reentered through the Cling evaluation routines,
@@ -3165,7 +3187,12 @@ void TCling::LoadMacro(const char* filename, EErrorCode* error)
 ////////////////////////////////////////////////////////////////////////////////
 /// Let cling process a command line asynch.
 
-Long_t TCling::ProcessLineAsynch(const char* line, EErrorCode* error)
+#ifdef _WIN64
+Long64_t
+#else
+Long_t
+#endif
+TCling::ProcessLineAsynch(const char* line, EErrorCode* error)
 {
    return ProcessLine(line, error);
 }
@@ -3174,7 +3201,12 @@ Long_t TCling::ProcessLineAsynch(const char* line, EErrorCode* error)
 /// Let cling process a command line synchronously, i.e we are waiting
 /// it will be finished.
 
-Long_t TCling::ProcessLineSynch(const char* line, EErrorCode* error)
+#ifdef _WIN64
+Long64_t
+#else
+Long_t
+#endif
+TCling::ProcessLineSynch(const char* line, EErrorCode* error)
 {
    R__LOCKGUARD_CLING(fLockProcessLine ? gInterpreterMutex : 0);
    if (gApplication) {
@@ -3190,7 +3222,12 @@ Long_t TCling::ProcessLineSynch(const char* line, EErrorCode* error)
 /// Directly execute an executable statement (e.g. "func()", "3+5", etc.
 /// however not declarations, like "Int_t x;").
 
-Long_t TCling::Calc(const char* line, EErrorCode* error)
+#ifdef _WIN64
+Long64_t
+#else
+Long_t
+#endif
+TCling::Calc(const char* line, EErrorCode* error)
 {
 #ifdef R__WIN32
    // Test on ApplicationImp not being 0 is needed because only at end of
@@ -3237,7 +3254,11 @@ Long_t TCling::Calc(const char* line, EErrorCode* error)
       gROOT->SetLineHasBeenProcessed();
    }
 #endif // R__WIN32
+#ifdef _WIN64
+   return valRef.simplisticCastAs<uint64_t>();
+#else
    return valRef.simplisticCastAs<long>();
+#endif
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -4805,7 +4829,7 @@ void TCling::Execute(TObject* obj, TClass* cl, const char* method,
    Long_t offset = 0L;
    TClingCallFunc func(fInterpreter,*fNormalizedCtxt);
    func.SetFunc((TClingClassInfo*)cl->GetClassInfo(), method, params, objectIsConst, &offset);
-   void* address = (void*)((Long_t)addr + offset);
+   void* address = (void*)((intptr_t)addr + offset);
    func.Exec(address);
 }

@@ -4912,8 +4936,8 @@ void TCling::Execute(TObject* obj, TClass* cl, TMethod* method,
    // Now calculate the 'this' pointer offset for the method
    // when starting from the class described by cl.
    const CXXMethodDecl * mdecl = dyn_cast<CXXMethodDecl>(minfo->GetMethodDecl());
-   Long_t offset = ((TClingClassInfo*)cl->GetClassInfo())->GetOffset(mdecl);
-   void* address = (void*)((Long_t)addr + offset);
+   intptr_t offset = ((TClingClassInfo*)cl->GetClassInfo())->GetOffset(mdecl);
+   void* address = (void*)((intptr_t)addr + offset);
    func.Exec(address);
 }

@@ -8077,7 +8101,7 @@ int TCling::DataMemberInfo_Next(DataMemberInfo_t* dminfo) const
 
 ////////////////////////////////////////////////////////////////////////////////
 
-Long_t TCling::DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const
+intptr_t TCling::DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const
 {
    TClingDataMemberInfo* TClinginfo = (TClingDataMemberInfo*) dminfo;
    return TClinginfo->Offset();
diff --git a/src/core/base/inc/TApplication.h b/src/core/base/inc/TApplication.h
index 456cfe6668..923cce4efe 100644
--- a/src/core/base/inc/TApplication.h
+++ b/src/core/base/inc/TApplication.h
@@ -110,7 +110,11 @@ public:
    virtual void    HandleIdleTimer();   //*SIGNAL*
    virtual Bool_t  HandleTermInput() { return kFALSE; }
    virtual void    Init() { fAppImp->Init(); }
+#ifdef _WIN64
+   virtual Long64_t  ProcessLine(const char *line, Bool_t sync = kFALSE, Int_t *error = 0);
+#else
    virtual Long_t  ProcessLine(const char *line, Bool_t sync = kFALSE, Int_t *error = 0);
+#endif
    virtual Long_t  ProcessFile(const char *file, Int_t *error = 0, Bool_t keep = kFALSE);
    virtual void    Run(Bool_t retrn = kFALSE);
    virtual void    SetIdleTimer(UInt_t idleTimeInSec, const char *command);
diff --git a/src/core/base/src/TApplication.cxx b/src/core/base/src/TApplication.cxx
index fe125c55ca..f204349615 100644
--- a/src/core/base/src/TApplication.cxx
+++ b/src/core/base/src/TApplication.cxx
@@ -881,7 +881,12 @@ namespace {
 /// command starting with a ".".
 /// Return the return value of the command cast to a long.
 
-Long_t TApplication::ProcessLine(const char *line, Bool_t sync, Int_t *err)
+#ifdef _WIN64
+Long64_t
+#else
+Long_t
+#endif
+TApplication::ProcessLine(const char *line, Bool_t sync, Int_t *err)
 {
    if (!line || !*line) return 0;
 
diff --git a/src/core/base/inc/TVirtualQConnection.h b/src/core/base/inc/TVirtualQConnection.h
index d2382af591..b2387e86c5 100644
--- a/src/core/base/inc/TVirtualQConnection.h
+++ b/src/core/base/inc/TVirtualQConnection.h
@@ -33,7 +33,7 @@ protected:
    // Note: sets argument list (for potentially more than one arg).
    virtual void SetArg(const Long_t *, Int_t = -1) = 0;
    virtual void SetArg(const char *) = 0;
-   void SetArg(const void *ptr) { SetArg((Long_t)ptr); };
+   void SetArg(const void *ptr) { SetArg((intptr_t)ptr); };
 
    // We should 'widen' all types to one of the SetArg overloads.
    template <class T, class = typename std::enable_if<std::is_integral<T>::value>::type>
diff --git a/src/core/meta/src/TClass.cxx b/src/core/meta/src/TClass.cxx
index c224ed7bd7..e6f9afb330 100644
--- a/src/core/meta/src/TClass.cxx
+++ b/src/core/meta/src/TClass.cxx
@@ -617,7 +617,7 @@ void TDumpMembers::Inspect(TClass *cl, const char *pname, const char *mname, con
          snprintf(&line[kvalue],kline-kvalue,"->0");
       else if (!isbasic) {
          if (!fNoAddr) {
-            snprintf(&line[kvalue],kline-kvalue,"->%lx ", (Long_t)p3pointer);
+            snprintf(&line[kvalue],kline-kvalue,"->%td ", (intptr_t)p3pointer);
          }
       } else if (membertype) {
          if (!strcmp(membertype->GetTypeName(), "char")) {
@@ -658,7 +658,7 @@ void TDumpMembers::Inspect(TClass *cl, const char *pname, const char *mname, con
          }
       } else {
          if (!fNoAddr) {
-            snprintf(&line[kvalue],kline-kvalue,"->%lx ", (Long_t)p3pointer);
+            snprintf(&line[kvalue],kline-kvalue,"->%td ", (intptr_t)p3pointer);
          }
       }
    } else if (membertype) {
@@ -680,7 +680,7 @@ void TDumpMembers::Inspect(TClass *cl, const char *pname, const char *mname, con
          snprintf(&line[kvalue],kline-kvalue,"%s",str->Data());
       } else {
          if (!fNoAddr) {
-            snprintf(&line[kvalue],kline-kvalue,"->%lx ", (Long_t)pointer);
+            snprintf(&line[kvalue],kline-kvalue,"->%td ", (intptr_t)pointer);
          }
       }
    }
@@ -776,7 +776,7 @@ void TBuildRealData::Inspect(TClass* cl, const char* pname, const char* mname, c
       }
    }
 
-   Long_t offset = Long_t(((Long_t) add) - ((Long_t) fRealDataObject));
+   intptr_t offset = intptr_t(((intptr_t) add) - ((intptr_t) fRealDataObject));
 
    if (TClassEdit::IsStdArray(dm->GetTypeName())){ // We tackle the std array case
       TString rdName;
@@ -2459,12 +2459,12 @@ void TClass::Draw(Option_t *option)
 void TClass::Dump(const void *obj, Bool_t noAddr /*=kFALSE*/) const
 {
 
-   Long_t prObj = noAddr ? 0 : (Long_t)obj;
+   intptr_t prObj = noAddr ? 0 : (intptr_t)obj;
    if (IsTObject()) {
       if (!fIsOffsetStreamerSet) {
          CalculateStreamerOffset();
       }
-      TObject *tobj = (TObject*)((Long_t)obj + fOffsetStreamer);
+      TObject *tobj = (TObject*)((intptr_t)obj + fOffsetStreamer);
 
 
       if (sizeof(this) == 4)
@@ -2788,12 +2788,12 @@ namespace {
             if (*thread_ptr==0) *thread_ptr = new TExMap();
             TExMap *lmap = (TExMap*)(*thread_ptr);
             ULong_t hash = TString::Hash(&cl, sizeof(void*));
-            ULong_t local = 0;
+            uintptr_t local = 0;
             UInt_t slot;
-            if ((local = (ULong_t)lmap->GetValue(hash, (Long_t)cl, slot)) != 0) {
+            if ((local = (uintptr_t)lmap->GetValue(hash, (intptr_t)cl, slot)) != 0) {
             } else {
-               local = (ULong_t) new TClassLocalStorage();
-               lmap->AddAt(slot, hash, (Long_t)cl, local);
+               local = (uintptr_t) new TClassLocalStorage();
+               lmap->AddAt(slot, hash, (intptr_t)cl, local);
             }
             return (TClassLocalStorage*)local;
          }
@@ -4360,7 +4360,7 @@ TMethod *TClass::GetClassMethod(Long_t faddr)
    TMethod *m;
    TIter    next(GetListOfMethods());
    while ((m = (TMethod *) next())) {
-      if (faddr == (Long_t)m->InterfaceMethod())
+      if (faddr == (intptr_t)m->InterfaceMethod())
          return m;
    }
    return 0;
@@ -4784,12 +4784,12 @@ void *TClass::DynamicCast(const TClass *cl, void *obj, Bool_t up)
 
    if (!HasDataMemberInfo()) return 0;
 
-   Int_t off;
+   intptr_t off;
    if ((off = GetBaseClassOffset(cl, obj)) != -1) {
       if (up)
-         return (void*)((Long_t)obj+off);
+         return (void*)((intptr_t)obj+off);
       else
-         return (void*)((Long_t)obj-off);
+         return (void*)((intptr_t)obj-off);
    }
    return 0;
 }
@@ -6526,7 +6526,7 @@ void TClass::StreamerTObject(const TClass* pThis, void *object, TBuffer &b, cons
    if (!pThis->fIsOffsetStreamerSet) {
       pThis->CalculateStreamerOffset();
    }
-   TObject *tobj = (TObject*)((Long_t)object + pThis->fOffsetStreamer);
+   TObject *tobj = (TObject*)((intptr_t)object + pThis->fOffsetStreamer);
    tobj->Streamer(b);
 }
 
@@ -6535,7 +6535,7 @@ void TClass::StreamerTObject(const TClass* pThis, void *object, TBuffer &b, cons
 
 void TClass::StreamerTObjectInitialized(const TClass* pThis, void *object, TBuffer &b, const TClass * /* onfile_class */)
 {
-   TObject *tobj = (TObject*)((Long_t)object + pThis->fOffsetStreamer);
+   TObject *tobj = (TObject*)((intptr_t)object + pThis->fOffsetStreamer);
    tobj->Streamer(b);
 }

diff --git a/src/core/meta/inc/TMethodCall.h b/src/core/meta/inc/TMethodCall.h
index 578d4c9ffe..ef04e56008 100644
--- a/src/core/meta/inc/TMethodCall.h
+++ b/src/core/meta/inc/TMethodCall.h
@@ -52,7 +52,7 @@ public:
 
 private:
    CallFunc_t    *fFunc;      //CINT method invocation environment
-   Long_t         fOffset;    //offset added to object pointer before method invocation
+   intptr_t       fOffset;    //offset added to object pointer before method invocation
    TClass        *fClass;     //pointer to the class info
    TFunction     *fMetPtr;    //pointer to the method or function info
    TString        fMethod;    //method name
@@ -68,7 +68,7 @@ private:
 
 public:
    TMethodCall();
-   TMethodCall(TClass *cl, CallFunc_t *callfunc, Long_t offset = 0);
+   TMethodCall(TClass *cl, CallFunc_t *callfunc, intptr_t offset = 0);
    TMethodCall(TClass *cl, const char *method, const char *params);
    TMethodCall(const char *function, const char *params);
    TMethodCall(const TFunction *func);
@@ -77,7 +77,7 @@ public:
    ~TMethodCall();
 
    void           Init(const TFunction *func);
-   void           Init(TClass *cl, CallFunc_t *func, Long_t offset = 0);
+   void           Init(TClass *cl, CallFunc_t *func, intptr_t offset = 0);
    void           Init(TClass *cl, const char *method, const char *params, Bool_t objectIsConst = kFALSE);
    void           Init(const char *function, const char *params);
    void           InitWithPrototype(TClass *cl, const char *method, const char *proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch);
@@ -95,11 +95,16 @@ public:
 
    void     SetParamPtrs(void *paramArr, Int_t nparam = -1);
    void     ResetParam();
+#ifdef _WIN64
+   void     SetParam(long l);
+   void     SetParam(intptr_t ll);
+#else
    void     SetParam(Long_t l);
-   void     SetParam(Float_t f);
-   void     SetParam(Double_t d);
    void     SetParam(Long64_t ll);
+#endif
    void     SetParam(ULong64_t ull);
+   void     SetParam(Float_t f);
+   void     SetParam(Double_t d);
 
    template <typename... T> void SetParams(const T&... params) {
       if (!fFunc) return;
@@ -108,8 +113,15 @@ public:
 
    void     Execute(void *object);
    void     Execute(void *object, const char *params);
+#ifdef _WIN64
+   void     Execute(void *object, long &retLong) { intptr_t ret = retLong; Execute(object, ret); retLong = (long)ret; }
+   void     Execute(void *object, const char *params, long &retLong) { intptr_t ret = retLong; Execute(object, params, ret); retLong = (long)ret; }
+   void     Execute(void *object, intptr_t &retLong);
+   void     Execute(void *object, const char *params, intptr_t &retLong);
+#else
    void     Execute(void *object, Long_t &retLong);
    void     Execute(void *object, const char *params, Long_t &retLong);
+#endif
    void     Execute(void *object, Double_t &retDouble);
    void     Execute(void *object, const char *params, Double_t &retDouble);
 
@@ -118,8 +130,15 @@ public:
 
    void     Execute();
    void     Execute(const char *params);
+#ifdef _WIN64
+   void     Execute(long &retLong);
+   void     Execute(const char *params, long &retLong);
+   void     Execute(intptr_t &retLong);
+   void     Execute(const char *params, intptr_t &retLong);
+#else
    void     Execute(Long_t &retLong);
    void     Execute(const char *params, Long_t &retLong);
+#endif
    void     Execute(Double_t &retDouble);
    void     Execute(const char *params, Double_t &retDouble);
 
@@ -132,10 +151,21 @@ inline void TMethodCall::Execute()
    { Execute((void *)0); }
 inline void TMethodCall::Execute(const char *params)
    { Execute((void *)0, params); }
+#ifdef _WIN64
+inline void TMethodCall::Execute(long &retLong)
+   { Execute((void *)0, retLong); }
+inline void TMethodCall::Execute(const char *params, long &retLong)
+   { Execute((void *)0, params, retLong); }
+inline void TMethodCall::Execute(intptr_t &retLong)
+   { Execute((void *)0, retLong); }
+inline void TMethodCall::Execute(const char *params, intptr_t &retLong)
+   { Execute((void *)0, params, retLong); }
+#else
 inline void TMethodCall::Execute(Long_t &retLong)
    { Execute((void *)0, retLong); }
 inline void TMethodCall::Execute(const char *params, Long_t &retLong)
    { Execute((void *)0, params, retLong); }
+#endif
 inline void TMethodCall::Execute(Double_t &retDouble)
    { Execute((void *)0, retDouble); }
 inline void TMethodCall::Execute(const char *params, Double_t &retDouble)
diff --git a/src/core/meta/src/TMethodCall.cxx b/src/core/meta/src/TMethodCall.cxx
index a79850e7b7..778a80883e 100644
--- a/src/core/meta/src/TMethodCall.cxx
+++ b/src/core/meta/src/TMethodCall.cxx
@@ -43,7 +43,7 @@ fFunc(0), fOffset(0), fClass(0), fMetPtr(0), fDtorOnly(kFALSE), fRetType(kNone)
 /// Create a method invocation environment for a specific class, method
 /// described by the callfunc.
 
-TMethodCall::TMethodCall(TClass *cl, CallFunc_t *callfunc, Long_t offset):
+TMethodCall::TMethodCall(TClass *cl, CallFunc_t *callfunc, intptr_t offset):
 fFunc(0), fOffset(0), fClass(0), fMetPtr(0), fDtorOnly(kFALSE), fRetType(kNone)
 {
    Init(cl, callfunc, offset);
@@ -179,7 +179,7 @@ static TClass *R__FindScope(const char *function, UInt_t &pos, ClassInfo_t *cinf
 /// Initialize the method invocation environment based on
 /// the CallFunc object and the TClass describing the function context.
 
-void TMethodCall::Init(TClass *cl, CallFunc_t *function, Long_t offset)
+void TMethodCall::Init(TClass *cl, CallFunc_t *function, intptr_t offset)
 {
    if (!function) {
       fOffset = 0;
@@ -317,14 +317,16 @@ void TMethodCall::InitImplementation(const char *methodname, const char *params,
    if (!scope) return;
 
    R__LOCKGUARD(gInterpreterMutex);
+   Long_t offset = fOffset;
    if (params && params[0]) {
-      gCling->CallFunc_SetFunc(fFunc, scope, (char *)methodname, (char *)params, objectIsConst, &fOffset);
+      gCling->CallFunc_SetFunc(fFunc, scope, (char *)methodname, (char *)params, objectIsConst, &offset);
    } else if (proto && proto[0]) {
-      gCling->CallFunc_SetFuncProto(fFunc, scope, (char *)methodname, (char *)proto, objectIsConst, &fOffset, mode);
+      gCling->CallFunc_SetFuncProto(fFunc, scope, (char *)methodname, (char *)proto, objectIsConst, &offset, mode);
    } else {
       // No parameters
-      gCling->CallFunc_SetFuncProto(fFunc, scope, (char *)methodname, "", objectIsConst, &fOffset, mode);
+      gCling->CallFunc_SetFuncProto(fFunc, scope, (char *)methodname, "", objectIsConst, &offset, mode);
    }
+   fOffset = (intptr_t)offset;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -420,7 +422,7 @@ void TMethodCall::Execute(void *object)
    if (!fFunc) return;
 
    void *address = 0;
-   if (object) address = (void*)((Long_t)object + fOffset);
+   if (object) address = (void*)((intptr_t)object + fOffset);
    if (!fDtorOnly && fMethod[0]=='~') {
       Error("Execute","TMethodCall can no longer be use to call the operator delete and the destructor at the same time");
    }
@@ -438,7 +440,7 @@ void TMethodCall::Execute(void *object, const char *params)
    gCling->CallFunc_SetArgs(fFunc, (char *)params);
 
    void *address = 0;
-   if (object) address = (void*)((Long_t)object + fOffset);
+   if (object) address = (void*)((intptr_t)object + fOffset);
    gCling->SetTempLevel(1);
    gCling->CallFunc_Exec(fFunc,address);
    gCling->SetTempLevel(-1);
@@ -447,12 +449,16 @@ void TMethodCall::Execute(void *object, const char *params)
 ////////////////////////////////////////////////////////////////////////////////
 /// Execute the method (with preset arguments) for the specified object.
 
+#ifdef _WIN64
+void TMethodCall::Execute(void *object, intptr_t &retLong)
+#else
 void TMethodCall::Execute(void *object, Long_t &retLong)
+#endif
 {
    if (!fFunc) return;
 
    void *address = 0;
-   if (object) address = (void*)((Long_t)object + fOffset);
+   if (object) address = (void*)((intptr_t)object + fOffset);
    gCling->SetTempLevel(1);
    retLong = gCling->CallFunc_ExecInt(fFunc,address);
    gCling->SetTempLevel(-1);
@@ -461,7 +467,11 @@ void TMethodCall::Execute(void *object, Long_t &retLong)
 ////////////////////////////////////////////////////////////////////////////////
 /// Execute the method for the specified object and argument values.
 
+#ifdef _WIN64
+void TMethodCall::Execute(void *object, const char *params, intptr_t &retLong)
+#else
 void TMethodCall::Execute(void *object, const char *params, Long_t &retLong)
+#endif
 {
    if (!fFunc) return;
 
@@ -469,7 +479,7 @@ void TMethodCall::Execute(void *object, const char *params, Long_t &retLong)
    gCling->CallFunc_SetArgs(fFunc, (char *)params);
 
    void *address = 0;
-   if (object) address = (void*)((Long_t)object + fOffset);
+   if (object) address = (void*)((intptr_t)object + fOffset);
    gCling->SetTempLevel(1);
    retLong = gCling->CallFunc_ExecInt(fFunc,address);
    gCling->SetTempLevel(-1);
@@ -483,7 +493,7 @@ void TMethodCall::Execute(void *object, Double_t &retDouble)
    if (!fFunc) return;
 
    void *address = 0;
-   if (object) address = (void*)((Long_t)object + fOffset);
+   if (object) address = (void*)((intptr_t)object + fOffset);
    gCling->SetTempLevel(1);
    retDouble = gCling->CallFunc_ExecDouble(fFunc,address);
    gCling->SetTempLevel(-1);
@@ -499,7 +509,7 @@ void TMethodCall::Execute(void *object, const char *params, Double_t &retDouble)
    gCling->CallFunc_SetArgs(fFunc, (char *)params);
 
    void *address = 0;
-   if (object) address = (void*)((Long_t)object + fOffset);
+   if (object) address = (void*)((intptr_t)object + fOffset);
    gCling->SetTempLevel(1);
    retDouble = gCling->CallFunc_ExecDouble(fFunc,address);
    gCling->SetTempLevel(-1);
@@ -513,9 +523,13 @@ void TMethodCall::Execute(void *object, char **retText)
    if (!fFunc) return;
 
    void *address = 0;
-   if (object) address = (void*)((Long_t)object + fOffset);
+   if (object) address = (void*)((intptr_t)object + fOffset);
    gCling->SetTempLevel(1);
+#ifdef _WIN64
+   *retText =(char*)(gCling->CallFunc_ExecInt64(fFunc,address));
+#else
    *retText =(char*) (gCling->CallFunc_ExecInt(fFunc,address));
+#endif
    gCling->SetTempLevel(-1);
 }
 
@@ -530,9 +544,13 @@ void TMethodCall::Execute(void *object, const char *params, char **retText)
    gCling->CallFunc_SetArgs(fFunc, (char *)params);
 
    void *address = 0;
-   if (object) address = (void*)((Long_t)object + fOffset);
+   if (object) address = (void*)((intptr_t)object + fOffset);
    gCling->SetTempLevel(1);
+#ifdef _WIN64
+   *retText =(char*)(gCling->CallFunc_ExecInt64(fFunc,address));
+#else
    *retText =(char*)(gCling->CallFunc_ExecInt(fFunc,address));
+#endif
    gCling->SetTempLevel(-1);
 }
 
@@ -600,7 +618,11 @@ void TMethodCall::ResetParam()
 ////////////////////////////////////////////////////////////////////////////////
 /// Add a long method parameter.
 
+#ifdef _WIN64
+void TMethodCall::SetParam(long l)
+#else
 void TMethodCall::SetParam(Long_t l)
+#endif
 {
    if (!fFunc) return;
    gCling->CallFunc_SetArg(fFunc,l);
@@ -627,7 +649,11 @@ void TMethodCall::SetParam(Double_t d)
 ////////////////////////////////////////////////////////////////////////////////
 /// Add a long long method parameter.
 
+#ifdef _WIN64
+void TMethodCall::SetParam(intptr_t ll)
+#else
 void TMethodCall::SetParam(Long64_t ll)
+#endif
 {
    if (!fFunc) return;
    gCling->CallFunc_SetArg(fFunc,ll);
diff --git a/src/core/cont/src/TArray.cxx b/src/core/cont/src/TArray.cxx
index 64940717ba..29e17cace3 100644
--- a/src/core/cont/src/TArray.cxx
+++ b/src/core/cont/src/TArray.cxx
@@ -29,7 +29,7 @@ ClassImp(TArray);
 
 Bool_t TArray::OutOfBoundsError(const char *where, Int_t i) const
 {
-   ::Error(where, "index %d out of bounds (size: %d, this: 0x%lx)", i, fN, (Long_t)this);
+   ::Error(where, "index %d out of bounds (size: %d, this: 0x%td)", i, fN, (intptr_t)this);
    return kFALSE;
 }

diff --git a/src/core/cont/src/TClassTable.cxx b/src/core/cont/src/TClassTable.cxx
index 72a55b2e1f..3c7ab6fe30 100644
--- a/src/core/cont/src/TClassTable.cxx
+++ b/src/core/cont/src/TClassTable.cxx
@@ -132,7 +132,7 @@ namespace ROOT {
       void Print() {
          Info("TMapTypeToClassRec::Print", "printing the typeinfo map in TClassTable");
          for (const_iterator iter = fMap.begin(); iter != fMap.end(); ++iter) {
-            printf("Key: %40s 0x%lx\n", iter->first.c_str(), (unsigned long)iter->second);
+            printf("Key: %40s 0x%td\n", iter->first.c_str(), (uintptr_t)iter->second);
          }
       }
 #else
@@ -589,7 +589,7 @@ DictFuncPtr_t TClassTable::GetDict(const std::type_info& info)
    if (!CheckClassTableInit()) return nullptr;
 
    if (gDebug > 9) {
-      ::Info("GetDict", "searches for %s at 0x%lx", info.name(), (Long_t)&info);
+      ::Info("GetDict", "searches for %s at 0x%td", info.name(), (intptr_t)&info);
       fgIdMap->Print();
    }
 
diff --git a/src/core/cont/src/TClonesArray.cxx b/src/core/cont/src/TClonesArray.cxx
index 0638e6bb7e..cf85bda227 100644
--- a/src/core/cont/src/TClonesArray.cxx
+++ b/src/core/cont/src/TClonesArray.cxx
@@ -906,7 +906,7 @@ void TClonesArray::Streamer(TBuffer &b)
 TObject *&TClonesArray::operator[](Int_t idx)
 {
    if (idx < 0) {
-      Error("operator[]", "out of bounds at %d in %lx", idx, (Long_t)this);
+      Error("operator[]", "out of bounds at %d in %td", idx, (intptr_t)this);
       return fCont[0];
    }
    if (!fClass) {
@@ -940,7 +940,7 @@ TObject *&TClonesArray::operator[](Int_t idx)
 TObject *TClonesArray::operator[](Int_t idx) const
 {
    if (idx < 0 || idx >= fSize) {
-      Error("operator[]", "out of bounds at %d in %lx", idx, (Long_t)this);
+      Error("operator[]", "out of bounds at %d in %td", idx, (intptr_t)this);
       return 0;
    }
 
@@ -954,7 +954,7 @@ TObject *TClonesArray::operator[](Int_t idx) const
 TObject *TClonesArray::New(Int_t idx)
 {
    if (idx < 0) {
-      Error("New", "out of bounds at %d in %lx", idx, (Long_t)this);
+      Error("New", "out of bounds at %d in %td", idx, (intptr_t)this);
       return 0;
    }
    if (!fClass) {
diff --git a/src/core/base/src/TROOT.cxx b/src/core/base/src/TROOT.cxx
index 171127d44d..4f3e6d07b3 100644
--- a/src/core/base/src/TROOT.cxx
+++ b/src/core/base/src/TROOT.cxx
@@ -1616,7 +1616,7 @@ TGlobal *TROOT::GetGlobal(const char *name, Bool_t load) const
 
 TGlobal *TROOT::GetGlobal(const TObject *addr, Bool_t /* load */) const
 {
-   if (addr == 0 || ((Long_t)addr) == -1) return 0;
+   if (addr == 0 || ((intptr_t)addr) == -1) return 0;
 
    TInterpreter::DeclId_t decl = gInterpreter->GetDataMemberAtAddr(addr);
    if (decl) {
@@ -2360,7 +2360,12 @@ void  TROOT::Message(Int_t id, const TObject *obj)
 /// CINT interpreted thread has finished executing the line.
 /// Returns the result of the command, cast to a Long_t.
 
-Long_t TROOT::ProcessLine(const char *line, Int_t *error)
+#ifdef _WIN64
+Long64_t
+#else
+Long_t
+#endif
+TROOT::ProcessLine(const char *line, Int_t *error)
 {
    TString sline = line;
    sline = sline.Strip(TString::kBoth);
@@ -2380,7 +2385,12 @@ Long_t TROOT::ProcessLine(const char *line, Int_t *error)
 /// The possible error codes are defined by TInterpreter::EErrorCode.
 /// Returns the result of the command, cast to a Long_t.
 
-Long_t TROOT::ProcessLineSync(const char *line, Int_t *error)
+#ifdef _WIN64
+Long64_t
+#else
+Long_t
+#endif
+TROOT::ProcessLineSync(const char *line, Int_t *error)
 {
    TString sline = line;
    sline = sline.Strip(TString::kBoth);
@@ -2397,7 +2407,12 @@ Long_t TROOT::ProcessLineSync(const char *line, Int_t *error)
 /// In all other cases use TROOT::ProcessLine().
 /// The possible error codes are defined by TInterpreter::EErrorCode.
 
-Long_t TROOT::ProcessLineFast(const char *line, Int_t *error)
+#ifdef _WIN64
+Long64_t
+#else
+Long_t
+#endif
+TROOT::ProcessLineFast(const char *line, Int_t *error)
 {
    TString sline = line;
    sline = sline.Strip(TString::kBoth);
diff --git a/src/core/cont/src/TObjArray.cxx b/src/core/cont/src/TObjArray.cxx
index 1a97d346ea..9b8948f645 100644
--- a/src/core/cont/src/TObjArray.cxx
+++ b/src/core/cont/src/TObjArray.cxx
@@ -236,7 +236,7 @@ void TObjArray::AddAtAndExpand(TObject *obj, Int_t idx)
    R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);
 
    if (idx < fLowerBound) {
-      Error("AddAt", "out of bounds at %d in %lx", idx, (Long_t)this);
+      Error("AddAt", "out of bounds at %d in %td", idx, (intptr_t)this);
       return;
    }
    if (idx-fLowerBound >= fSize)
@@ -656,7 +656,7 @@ TIterator *TObjArray::MakeIterator(Bool_t dir) const
 
 Bool_t TObjArray::OutOfBoundsError(const char *where, Int_t i) const
 {
-   Error(where, "index %d out of bounds (size: %d, this: 0x%lx)", i, fSize, (Long_t)this);
+   Error(where, "index %d out of bounds (size: %d, this: 0x%td)", i, fSize, (intptr_t)this);
    return kFALSE;
 }

diff --git a/src/core/cont/src/TObjectTable.cxx b/src/core/cont/src/TObjectTable.cxx
index d5c348ac4b..69aabd1ce6 100644
--- a/src/core/cont/src/TObjectTable.cxx
+++ b/src/core/cont/src/TObjectTable.cxx
@@ -130,7 +130,7 @@ void TObjectTable::Print(Option_t *option) const
          if (!fTable[i]) continue;
          num++;
          obj = fTable[i];
-         printf("%-8d 0x%-16lx %-24s %s\n", num, (Long_t)obj, obj->ClassName(),
+         printf("%-8d 0x%-16td %-24s %s\n", num, (intptr_t)obj, obj->ClassName(),
                 obj->GetName());
       }
       Printf("================================================================================\n");
@@ -217,10 +217,10 @@ void TObjectTable::Remove(TObject *op)
 
    Int_t i = FindElement(op);
    if (fTable[i] == 0) {
-      Warning("Remove", "0x%lx not found at %d", (Long_t)op, i);
+      Warning("Remove", "0x%td not found at %d", (intptr_t)op, i);
       for (int j = 0; j < fSize; j++) {
          if (fTable[j] == op) {
-            Error("Remove", "0x%lx found at %d !!!", (Long_t)op, j);
+            Error("Remove", "0x%td found at %d !!!", (intptr_t)op, j);
             i = j;
          }
       }
@@ -384,7 +384,7 @@ void TObjectTable::UpdateInstCount() const
          if (op->TestBit(TObject::kNotDeleted))
             op->IsA()->AddInstance(op->IsOnHeap());
          else
-            Error("UpdateInstCount", "oops 0x%lx\n", (Long_t)op);
+            Error("UpdateInstCount", "oops 0x%td\n", (intptr_t)op);
       }
 }
 
@@ -396,7 +396,7 @@ void *TObjectTable::CheckPtrAndWarn(const char *msg, void *vp)
 {
    if (fTable && vp && fTable[FindElement((TObject*)vp)]) {
       Remove((TObject*)vp);
-      Warning("CheckPtrAndWarn", "%s (0x%lx)\n", msg, (Long_t)vp);
+      Warning("CheckPtrAndWarn", "%s (0x%td)\n", msg, (intptr_t)vp);
    }
    return vp;
 }

diff --git a/src/core/cont/src/TRefArray.cxx b/src/core/cont/src/TRefArray.cxx
index 1baeff2878..eb64f60591 100644
--- a/src/core/cont/src/TRefArray.cxx
+++ b/src/core/cont/src/TRefArray.cxx
@@ -337,7 +337,7 @@ void TRefArray::AddAtAndExpand(TObject *obj, Int_t idx)
 {
    if (!obj) return;
    if (idx < fLowerBound) {
-      Error("AddAt", "out of bounds at %d in %lx", idx, (Long_t)this);
+      Error("AddAt", "out of bounds at %d in %td", idx, (intptr_t)this);
       return;
    }
    if (idx-fLowerBound >= fSize)
@@ -526,7 +526,7 @@ void TRefArray::Streamer(TBuffer &R__b)
       R__b >> pidf;
       pidf += R__b.GetPidOffset();
       fPID = R__b.ReadProcessID(pidf);
-      if (gDebug > 1) printf("Reading TRefArray, pidf=%d, fPID=%lx, nobjects=%d\n",pidf,(Long_t)fPID,nobjects);
+      if (gDebug > 1) printf("Reading TRefArray, pidf=%d, fPID=%td, nobjects=%d\n",pidf,(intptr_t)fPID,nobjects);
       for (Int_t i = 0; i < nobjects; i++) {
          R__b >> fUIDs[i];
          if (fUIDs[i] != 0) fLast = i;
@@ -547,7 +547,7 @@ void TRefArray::Streamer(TBuffer &R__b)
       R__b << fLowerBound;
       pidf = R__b.WriteProcessID(fPID);
       R__b << pidf;
-      if (gDebug > 1) printf("Writing TRefArray, pidf=%d, fPID=%lx, nobjects=%d\n",pidf,(Long_t)fPID,nobjects);
+      if (gDebug > 1) printf("Writing TRefArray, pidf=%d, fPID=%td, nobjects=%d\n",pidf,(intptr_t)fPID,nobjects);
 
       for (Int_t i = 0; i < nobjects; i++) {
          R__b << fUIDs[i];
@@ -711,7 +711,7 @@ TIterator *TRefArray::MakeIterator(Bool_t dir) const
 
 Bool_t TRefArray::OutOfBoundsError(const char *where, Int_t i) const
 {
-   Error(where, "index %d out of bounds (size: %d, this: 0x%lx)", i, fSize, (Long_t)this);
+   Error(where, "index %d out of bounds (size: %d, this: 0x%td)", i, fSize, (intptr_t)this);
    return kFALSE;
 }

diff --git a/src/core/cont/src/TSeqCollection.cxx b/src/core/cont/src/TSeqCollection.cxx
index a62d89e3ff..229d3b4a65 100644
--- a/src/core/cont/src/TSeqCollection.cxx
+++ b/src/core/cont/src/TSeqCollection.cxx
@@ -272,7 +272,11 @@ Long64_t TSeqCollection::Merge(TCollection *list)
       }
       // Merge current object with objects in the temporary list
       if (mergeable) {
+#ifdef _WIN64
+         callEnv.SetParam((intptr_t) templist);
+#else
          callEnv.SetParam((Long_t) templist);
+#endif
          callEnv.Execute(object);
          SafeDelete(templist);
       }
diff --git a/src/core/winnt/inc/TWinNTSystem.h b/src/core/winnt/inc/TWinNTSystem.h
index 5a6d2719eb..6c40c34f6a 100644
--- a/src/core/winnt/inc/TWinNTSystem.h
+++ b/src/core/winnt/inc/TWinNTSystem.h
@@ -262,6 +262,6 @@ public:
    ClassDef(TWinNTSystem, 0)
 };
 
-R__EXTERN ULong_t gConsoleWindow;   // console window handle
+R__EXTERN void* gConsoleWindow;   // console window handle
 
 #endif
diff --git a/src/core/winnt/src/TWinNTSystem.cxx b/src/core/winnt/src/TWinNTSystem.cxx
index 7a477878a0..bfb16a5a09 100644
--- a/src/core/winnt/src/TWinNTSystem.cxx
+++ b/src/core/winnt/src/TWinNTSystem.cxx
@@ -924,7 +924,7 @@ namespace {
       // ensure window title has been updated
       ::Sleep(40);
       // look for NewWindowTitle
-      gConsoleWindow = (ULong_t)::FindWindow(0, pszNewWindowTitle);
+      gConsoleWindow = (void*)::FindWindow(0, pszNewWindowTitle);
       if (gConsoleWindow) {
          // restore original window title
          ::ShowWindow((HWND)gConsoleWindow, SW_RESTORE);
@@ -945,7 +945,7 @@ namespace {
 ///////////////////////////////////////////////////////////////////////////////
 ClassImp(TWinNTSystem);
 
-ULong_t gConsoleWindow = 0;
+void* gConsoleWindow = 0;
 
 ////////////////////////////////////////////////////////////////////////////////
 ///
@@ -3890,7 +3890,7 @@ void TWinNTSystem::Exit(int code, Bool_t mode)
                   if (((TBrowser*)0x%lx)->GetBrowserImp() &&\
                       ((TBrowser*)0x%lx)->GetBrowserImp()->GetMainFrame()) \
                      ((TBrowser*)0x%lx)->GetBrowserImp()->GetMainFrame()->CloseWindow();\
-                  else delete (TBrowser*)0x%lx", (ULong_t)b, (ULong_t)b, (ULong_t)b, (ULong_t)b));
+                  else delete (TBrowser*)0x%td", (uintptr_t)b, (uintptr_t)b, (uintptr_t)b, (uintptr_t)b));
          }
       }
       gROOT->EndOfProcessCleanups();
diff --git a/src/core/metacling/src/TClingCallFunc.cxx b/src/core/metacling/src/TClingCallFunc.cxx
index 92c96215c0..e77026ebe3 100644
--- a/src/core/metacling/src/TClingCallFunc.cxx
+++ b/src/core/metacling/src/TClingCallFunc.cxx
@@ -224,7 +224,7 @@ namespace {
       }
       if (QT->isPointerType() || QT->isArrayType() || QT->isRecordType() ||
             QT->isReferenceType()) {
-         return (returnType)(long) val.getPtr();
+         return (returnType)(intptr_t)val.getPtr();
       }
       if (const EnumType *ET = dyn_cast<EnumType>(&*QT)) {
          if (ET->getDecl()->getIntegerType()->hasSignedIntegerRepresentation())
@@ -232,13 +232,8 @@ namespace {
          else
             return (returnType) val.getULL();
       }
-      if (QT->isMemberPointerType()) {
-         const MemberPointerType *MPT = QT->getAs<MemberPointerType>();
-         if (MPT->isMemberDataPointer()) {
-            return (returnType)(ptrdiff_t)val.getPtr();
-         }
-         return (returnType)(long) val.getPtr();
-      }
+      if (QT->isMemberPointerType())
+         return (returnType)(intptr_t)val.getPtr();
       ::Error("TClingCallFunc::sv_to", "Invalid Type!");
       QT->dump();
       return 0;
diff --git a/src/core/metacling/src/TClingClassInfo.cxx b/src/core/metacling/src/TClingClassInfo.cxx
index 1cb6973800..f052455243 100644
--- a/src/core/metacling/src/TClingClassInfo.cxx
+++ b/src/core/metacling/src/TClingClassInfo.cxx
@@ -1329,7 +1329,7 @@ long TClingClassInfo::Tagnum() const
    if (!IsValid()) {
       return -1L;
    }
-   return reinterpret_cast<long>(GetDecl());
+   return (long)(intptr_t)GetDecl();
 }
 
 const char *TClingClassInfo::FileName()
diff --git a/src/core/metacling/src/TClingDataMemberInfo.h b/src/core/metacling/src/TClingDataMemberInfo.h
index 7fbb19dec0..090a527474 100644
--- a/src/core/metacling/src/TClingDataMemberInfo.h
+++ b/src/core/metacling/src/TClingDataMemberInfo.h
@@ -134,7 +134,7 @@ public:
    int                MaxIndex(int dim) const;
    int                InternalNext();
    bool               Next() { return InternalNext(); }
-   long               Offset();
+   intptr_t           Offset();
    long               Property() const;
    long               TypeProperty() const;
    int                TypeSize() const;
diff --git a/src/core/metacling/src/TClingDataMemberInfo.cxx b/src/core/metacling/src/TClingDataMemberInfo.cxx
index 9c8fa9980f..76ff219c8b 100644
--- a/src/core/metacling/src/TClingDataMemberInfo.cxx
+++ b/src/core/metacling/src/TClingDataMemberInfo.cxx
@@ -312,7 +312,7 @@ int TClingDataMemberInfo::InternalNext()
    return 0;
 }
 
-long TClingDataMemberInfo::Offset()
+intptr_t TClingDataMemberInfo::Offset()
 {
    using namespace clang;
 
@@ -352,13 +352,13 @@ long TClingDataMemberInfo::Offset()
       //   static constexpr Long64_t something = std::numeric_limits<Long64_t>::max();
       cling::Interpreter::PushTransactionRAII RAII(fInterp);
 
-      if (long addr = reinterpret_cast<long>(fInterp->getAddressOfGlobal(GlobalDecl(VD))))
+      if (intptr_t addr = (intptr_t)fInterp->getAddressOfGlobal(GlobalDecl(VD)))
          return addr;
       auto evalStmt = VD->ensureEvaluatedStmt();
       if (evalStmt && evalStmt->Value) {
          if (const APValue* val = VD->evaluateValue()) {
             if (VD->getType()->isIntegralType(C)) {
-               return reinterpret_cast<long>(val->getInt().getRawData());
+               return (intptr_t)val->getInt().getRawData();
             } else {
                // The VD stores the init value; its lifetime should the lifetime of
                // this offset.
@@ -368,17 +368,17 @@ long TClingDataMemberInfo::Offset()
                      fConstInitVal.fLong = (long)val->getInt().getSExtValue();
                   else
                      fConstInitVal.fLong = (long)val->getInt().getZExtValue();
-                  return (long) &fConstInitVal.fLong;
+                  return (intptr_t) &fConstInitVal.fLong;
                }
                case APValue::Float:
                   if (&val->getFloat().getSemantics()
                       == (const llvm::fltSemantics*)&llvm::APFloat::IEEEsingle()) {
                      fConstInitVal.fFloat = val->getFloat().convertToFloat();
-                     return (long)&fConstInitVal.fFloat;
+                     return (intptr_t)&fConstInitVal.fFloat;
                   } else if (&val->getFloat().getSemantics()
                              == (const llvm::fltSemantics*) &llvm::APFloat::IEEEdouble()) {
                      fConstInitVal.fDouble = val->getFloat().convertToDouble();
-                     return (long)&fConstInitVal.fDouble;
+                     return (intptr_t)&fConstInitVal.fDouble;
                   }
                   // else fall-through
                default:
@@ -399,7 +399,7 @@ long TClingDataMemberInfo::Offset()
       // part.
 #ifdef R__BYTESWAP
       // In this case at the beginning.
-      return reinterpret_cast<long>(ECD->getInitVal().getRawData());
+      return (intptr_t)ECD->getInitVal().getRawData();
 #else
       // In this case in the second part.
       return reinterpret_cast<long>(((char*)ECD->getInitVal().getRawData())+sizeof(long) );
diff --git a/src/core/base/src/TBuffer.cxx b/src/core/base/src/TBuffer.cxx
index 8243454040..ccf7186c51 100644
--- a/src/core/base/src/TBuffer.cxx
+++ b/src/core/base/src/TBuffer.cxx
@@ -248,7 +248,7 @@ void TBuffer::Expand(Int_t newsize, Bool_t copy)
       } else if (fReAllocFunc == R__NoReAllocChar) {
          Fatal("Expand","Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.");
       } else {
-         Fatal("Expand","Failed to expand the data buffer using custom memory reallocator 0x%lx.", (Long_t)fReAllocFunc);
+         Fatal("Expand","Failed to expand the data buffer using custom memory reallocator 0x%td.", (intptr_t)fReAllocFunc);
       }
    }
    fBufSize = newsize;
diff --git a/src/core/base/src/TContextMenu.cxx b/src/core/base/src/TContextMenu.cxx
index f64cfbee55..d2819e6954 100644
--- a/src/core/base/src/TContextMenu.cxx
+++ b/src/core/base/src/TContextMenu.cxx
@@ -154,7 +154,7 @@ void TContextMenu::Action(TClassMenuItem *menuitem)
                // It is a workaround of the "Dead lock under Windows
                char *cmd = Form("((TContextMenu *)0x%lx)->Execute((TObject *)0x%lx,"
                                 "(TMethod *)0x%lx,\"\");",
-                                (Long_t)this,(Long_t)object,(Long_t)method);
+                                (intptr_t)this,(intptr_t)object,(intptr_t)method);
                //Printf("%s", cmd);
                gROOT->ProcessLine(cmd);
                //Execute( object, method, (TObjArray *)NULL );
@@ -166,8 +166,8 @@ void TContextMenu::Action(TClassMenuItem *menuitem)
                // It is a workaround of the "Dead lock under Windows
                char *cmd = Form("((TContextMenu *)0x%lx)->Execute((TObject *)0x%lx,"
                                 "(TMethod *)0x%lx,(TObject*)0x%lx);",
-                                (Long_t)this,(Long_t)object,(Long_t)method,
-                                (Long_t)fSelectedObject);
+                                (intptr_t)this,(intptr_t)object,(intptr_t)method,
+                                (intptr_t)fSelectedObject);
                //Printf("%s", cmd);
                gROOT->ProcessLine(cmd);
                //Execute( object, method, (TObjArray *)NULL );
@@ -193,7 +193,7 @@ void TContextMenu::Action(TClassMenuItem *menuitem)
                cmd = Form("%s();", menuitem->GetFunctionName());
             } else {
               cmd = Form("%s((TObject*)0x%lx);",
-                     menuitem->GetFunctionName(), (Long_t)fSelectedObject);
+                     menuitem->GetFunctionName(), (intptr_t)fSelectedObject);
             }
             gROOT->ProcessLine(cmd);
          }
diff --git a/src/core/base/src/TGuiFactory.cxx b/src/core/base/src/TGuiFactory.cxx
index 6202c184c5..029b66e7cd 100644
--- a/src/core/base/src/TGuiFactory.cxx
+++ b/src/core/base/src/TGuiFactory.cxx
@@ -115,6 +115,6 @@ TInspectorImp *TGuiFactory::CreateInspectorImp(const TObject *obj, UInt_t width,
       return new TInspectorImp(obj, width, height);
    }
 
-   gROOT->ProcessLine(Form("TInspectCanvas::Inspector((TObject*)0x%lx);", (ULong_t)obj));
+   gROOT->ProcessLine(Form("TInspectCanvas::Inspector((TObject*)0x%td);", (uintptr_t)obj));
    return 0;
 }
diff --git a/src/core/base/src/TMacro.cxx b/src/core/base/src/TMacro.cxx
index 36bb598850..8d142e38f2 100644
--- a/src/core/base/src/TMacro.cxx
+++ b/src/core/base/src/TMacro.cxx
@@ -181,7 +181,7 @@ void TMacro::Browse(TBrowser * /*b*/)
       return;
    }
    if (opt.Contains(".C")) {
-      const char *cmd = Form(".x %s((TMacro*)0x%lx)",opt.Data(),(ULong_t)this);
+      const char *cmd = Form(".x %s((TMacro*)0x%td)",opt.Data(),(uintptr_t)this);
       gROOT->ProcessLine(cmd);
       return;
    }
diff --git a/src/core/base/inc/TObject.h b/src/core/base/inc/TObject.h
index 15c4ccd265..1613d63995 100644
--- a/src/core/base/inc/TObject.h
+++ b/src/core/base/inc/TObject.h
@@ -40,7 +40,7 @@ private:
    UInt_t         fUniqueID;   ///< object unique identifier
    UInt_t         fBits;       ///< bit field status word
 
-   static Long_t  fgDtorOnly;    ///< object for which to call dtor only (i.e. no delete)
+   static intptr_t fgDtorOnly;  ///< object for which to call dtor only (i.e. no delete)
    static Bool_t  fgObjectStat;  ///< if true keep track of objects in TObjectTable
 
    static void AddToTObjectTable(TObject *);
diff --git a/src/core/base/src/TObject.cxx b/src/core/base/src/TObject.cxx
index 1cdf15f4ee..c875d9a524 100644
--- a/src/core/base/src/TObject.cxx
+++ b/src/core/base/src/TObject.cxx
@@ -49,7 +49,7 @@ class hierarchies (watch out for overlaps).
 #include "TRefTable.h"
 #include "TProcessID.h"
 
-Long_t TObject::fgDtorOnly = 0;
+intptr_t TObject::fgDtorOnly = 0;
 Bool_t TObject::fgObjectStat = kTRUE;
 
 ClassImp(TObject);
@@ -976,7 +976,7 @@ Long_t TObject::GetDtorOnly()
 
 void TObject::SetDtorOnly(void *obj)
 {
-   fgDtorOnly = (Long_t) obj;
+   fgDtorOnly = (intptr_t) obj;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -984,7 +984,7 @@ void TObject::SetDtorOnly(void *obj)
 
 void TObject::operator delete(void *ptr)
 {
-   if ((Long_t) ptr != fgDtorOnly)
+   if ((intptr_t) ptr != fgDtorOnly)
       TStorage::ObjectDealloc(ptr);
    else
       fgDtorOnly = 0;
@@ -995,7 +995,7 @@ void TObject::operator delete(void *ptr)
 
 void TObject::operator delete[](void *ptr)
 {
-   if ((Long_t) ptr != fgDtorOnly)
+   if ((intptr_t) ptr != fgDtorOnly)
       TStorage::ObjectDealloc(ptr);
    else
       fgDtorOnly = 0;
@@ -1007,7 +1007,7 @@ void TObject::operator delete[](void *ptr)
 
 void TObject::operator delete(void *ptr, size_t size)
 {
-   if ((Long_t) ptr != fgDtorOnly)
+   if ((intptr_t) ptr != fgDtorOnly)
       TStorage::ObjectDealloc(ptr, size);
    else
       fgDtorOnly = 0;
@@ -1018,7 +1018,7 @@ void TObject::operator delete(void *ptr, size_t size)
 
 void TObject::operator delete[](void *ptr, size_t size)
 {
-   if ((Long_t) ptr != fgDtorOnly)
+   if ((intptr_t) ptr != fgDtorOnly)
       TStorage::ObjectDealloc(ptr, size);
    else
       fgDtorOnly = 0;

diff --git a/src/core/base/src/TProcessID.cxx b/src/core/base/src/TProcessID.cxx
index ea24c5c457..3afea9fd75 100644
--- a/src/core/base/src/TProcessID.cxx
+++ b/src/core/base/src/TProcessID.cxx
@@ -270,7 +270,7 @@ TProcessID *TProcessID::GetProcessWithUID(UInt_t uid, const void *obj)
       ULong_t hash = Void_Hash(obj);
 
       R__READ_LOCKGUARD(ROOT::gCoreMutex);
-      pid = fgObjPIDs->GetValue(hash,(Long_t)obj);
+      pid = fgObjPIDs->GetValue(hash,(intptr_t)obj);
       return (TProcessID*)fgPIDs->At(pid);
    } else {
       auto current = gGetProcessWithUIDCache.load();
@@ -399,7 +399,7 @@ void TProcessID::PutObjectWithID(TObject *obj, UInt_t uid)
       // if the address has already been registered, we want to
       // update it's uniqueID (this can easily happen when the
       // referenced object have been stored in a TClonesArray.
-      (*fgObjPIDs)(hash, (Long_t)obj) = GetUniqueID();
+      (*fgObjPIDs)(hash, (intptr_t)obj) = GetUniqueID();
    }
 }
 
diff --git a/src/core/base/src/TQCommand.cxx b/src/core/base/src/TQCommand.cxx
index f073bada46..2ceb134570 100644
--- a/src/core/base/src/TQCommand.cxx
+++ b/src/core/base/src/TQCommand.cxx
@@ -1013,7 +1013,7 @@ void TQUndoManager::Add(TObject *obj, Option_t *opt)
 
 void TQUndoManager::CurrentChanged(TQCommand *c)
 {
-   Emit("CurrentChanged(TQCommand*)", (long)c);
+   Emit("CurrentChanged(TQCommand*)", (intptr_t)c);
 }
 
 ////////////////////////////////////////////////////////////////////////////////
diff --git a/src/core/base/src/TQConnection.cxx b/src/core/base/src/TQConnection.cxx
index e4e8e3ada3..d79bcbdd33 100644
--- a/src/core/base/src/TQConnection.cxx
+++ b/src/core/base/src/TQConnection.cxx
@@ -319,7 +319,7 @@ inline void TQSlot::ExecuteMethod(void *object, Long64_t param)
 
 inline void TQSlot::ExecuteMethod(void *object, Double_t param)
 {
-   Long_t *arg = reinterpret_cast<Long_t *>(&param);
+   Long_t *arg = reinterpret_cast<Long_t*>(&param);
    ExecuteMethod(object, arg, 1);
 
 }
@@ -329,8 +329,8 @@ inline void TQSlot::ExecuteMethod(void *object, Double_t param)
 
 inline void TQSlot::ExecuteMethod(void *object, const char *param)
 {
-   Long_t arg = reinterpret_cast<Long_t>(param);
-   ExecuteMethod(object, &arg, 1);
+   intptr_t arg = (intptr_t)param;
+   ExecuteMethod(object, (Long_t*)&arg, 1);
 
 }
 
@@ -348,7 +348,7 @@ inline void TQSlot::ExecuteMethod(void *object, Long_t *paramArr, Int_t nparam)
    void *address = 0;
    R__LOCKGUARD(gInterpreterMutex);
    if (paramArr) gCling->CallFunc_SetArgArray(fFunc, paramArr, nparam);
-   if (object) address = (void *)((Long_t)object + fOffset);
+   if (object) address = (void *)((intptr_t)object + fOffset);
    fExecuting++;
    gCling->CallFunc_Exec(fFunc, address);
    fExecuting--;
@@ -655,7 +655,7 @@ Bool_t TQConnection::CheckSlot(Int_t nargs) const {
 /// Return the object address to be passed to the function.
 
 void *TQConnection::GetSlotAddress() const {
-   if (fReceiver) return (void *)((Long_t)fReceiver + fSlot->GetOffset());
+   if (fReceiver) return (void *)((intptr_t)fReceiver + fSlot->GetOffset());
    else return nullptr;
 }
 
diff --git a/src/core/base/src/TRef.cxx b/src/core/base/src/TRef.cxx
index c3fac0fdaf..a3deef0117 100644
--- a/src/core/base/src/TRef.cxx
+++ b/src/core/base/src/TRef.cxx
@@ -496,7 +496,7 @@ void TRef::Streamer(TBuffer &R__b)
          fPID = pid;
          SetUniqueID(number);
          if (gDebug > 1) {
-            printf("Reading TRef (HasUUID) uid=%d, obj=%lx\n",GetUniqueID(),(Long_t)GetObject());
+            printf("Reading TRef (HasUUID) uid=%d, obj=%td\n",GetUniqueID(),(intptr_t)GetObject());
          }
       } else {
          R__b >> pidf;
@@ -509,7 +509,7 @@ void TRef::Streamer(TBuffer &R__b)
          Int_t execid = R__b.GetTRefExecId();
          if (execid) SetBit(execid<<16);
          if (gDebug > 1) {
-            printf("Reading TRef, pidf=%d, fPID=%lx, uid=%d, obj=%lx\n",pidf,(Long_t)fPID,GetUniqueID(),(Long_t)GetObject());
+            printf("Reading TRef, pidf=%d, fPID=%td, uid=%d, obj=%td\n",pidf,(intptr_t)fPID,GetUniqueID(),(intptr_t)GetObject());
          }
       }
    } else {
@@ -519,13 +519,13 @@ void TRef::Streamer(TBuffer &R__b)
          TObjString *objs = gROOT->GetUUIDs()->FindUUID(GetUniqueID());
          objs->String().Streamer(R__b);
          if (gDebug > 1) {
-            printf("Writing TRef (HasUUID) uid=%d, obj=%lx\n",GetUniqueID(),(Long_t)GetObject());
+            printf("Writing TRef (HasUUID) uid=%d, obj=%td\n",GetUniqueID(),(intptr_t)GetObject());
          }
       } else {
          pidf = R__b.WriteProcessID(fPID);
          R__b << pidf;
          if (gDebug > 1) {
-            printf("Writing TRef, pidf=%d, fPID=%lx, uid=%d, obj=%lx\n",pidf,(Long_t)fPID,GetUniqueID(),(Long_t)GetObject());
+            printf("Writing TRef, pidf=%d, fPID=%td, uid=%d, obj=%td\n",pidf,(intptr_t)fPID,GetUniqueID(),(intptr_t)GetObject());
          }
       }
    }
diff --git a/src/core/base/src/TRemoteObject.cxx b/src/core/base/src/TRemoteObject.cxx
index f288bfe2ed..fb8491aa27 100644
--- a/src/core/base/src/TRemoteObject.cxx
+++ b/src/core/base/src/TRemoteObject.cxx
@@ -60,7 +60,7 @@ TRemoteObject::TRemoteObject(const char *name, const char *title,
        !strcmp(classname, "TSystemFile")) {
       gSystem->GetPathInfo(name, fFileStat);
    }
-   Long_t raddr = (Long_t) this;
+   intptr_t raddr = (intptr_t) this;
    fRemoteAddress = raddr;
 }
 
@@ -92,7 +92,7 @@ void TRemoteObject::Browse(TBrowser *b)
       TObject *obj = (TObject *)gROOT->ProcessLine(Form("((TApplicationServer *)gApplication)->BrowseKey(\"%s\");", GetName()));
       if (obj) {
          if (obj->IsA()->GetMethodWithPrototype("SetDirectory", "TDirectory*"))
-            gROOT->ProcessLine(Form("((%s *)0x%lx)->SetDirectory(0);", obj->ClassName(), (ULong_t)obj));
+            gROOT->ProcessLine(Form("((%s *)0x%td)->SetDirectory(0);", obj->ClassName(), (uintptr_t)obj));
          obj->Browse(b);
          b->SetRefreshFlag(kTRUE);
       }

diff --git a/src/core/base/src/TString.cxx b/src/core/base/src/TString.cxx
index 31673a53b4..046f26d525 100644
--- a/src/core/base/src/TString.cxx
+++ b/src/core/base/src/TString.cxx
@@ -540,7 +540,7 @@ UInt_t Hash(const char *str)
    UInt_t hv  = len; // Mix in the string length.
    UInt_t i   = hv*sizeof(char)/sizeof(UInt_t);
 
-   if (((ULong_t)str)%sizeof(UInt_t) == 0) {
+   if (((uintptr_t)str)%sizeof(UInt_t) == 0) {
       // str is word aligned
       const UInt_t *p = (const UInt_t*)str;
 
(dev_python) [cerebro] ~/pypy-dev/root % vi ./core/base/src/TStyle.cxx
(dev_python) [cerebro] ~/pypy-dev/root % git diff ./core/base/src/TStyle.cxx

diff --git a/src/core/base/src/TStyle.cxx b/src/core/base/src/TStyle.cxx
index 2d2ba966e9..a734ba9ebb 100644
--- a/src/core/base/src/TStyle.cxx
+++ b/src/core/base/src/TStyle.cxx
@@ -1057,7 +1057,7 @@ Float_t TStyle::GetTitleSize( Option_t *axis) const
 void TStyle::Paint(Option_t *option)
 {
    gROOT->ProcessLine(Form("TStyleManager::PaintStyle((TStyle*)0x%lx,\"%s\")",
-                           (ULong_t)this,option));
+                           (uintptr_t)this,option));
 }
 
 ////////////////////////////////////////////////////////////////////////////////
diff --git a/src/core/base/src/TDirectory.cxx b/src/core/base/src/TDirectory.cxx
index 8fce0f1a59..dfba710076 100644
--- a/src/core/base/src/TDirectory.cxx
+++ b/src/core/base/src/TDirectory.cxx
@@ -1188,7 +1188,7 @@ Int_t TDirectory::SaveObjectAs(const TObject *obj, const char *filename, Option_
    }
    TString cmd;
    if (fname.Index(".json") > 0) {
-      cmd.Form("TBufferJSON::ExportToFile(\"%s\",(TObject*) %s, \"%s\");", fname.Data(), TString::LLtoa((Long_t)obj, 10).Data(), (option ? option : ""));
+      cmd.Form("TBufferJSON::ExportToFile(\"%s\",(TObject*) %s, \"%s\");", fname.Data(), TString::LLtoa((intptr_t)obj, 10).Data(), (option ? option : ""));
       nbytes = gROOT->ProcessLine(cmd);
    } else {
       cmd.Form("TFile::Open(\"%s\",\"recreate\");",fname.Data());
diff --git a/src/build/win/bindexplib/bindexplib.cxx b/src/build/win/bindexplib/bindexplib.cxx
index 04ae355059..b513a53a03 100644
--- a/src/build/win/bindexplib/bindexplib.cxx
+++ b/src/build/win/bindexplib/bindexplib.cxx
@@ -409,7 +409,7 @@ HaveExportedObjects(PIMAGE_FILE_HEADER pImageFileHeader, PIMAGE_SECTION_HEADER p
        if (strncmp(lookingForDATA, ",DATA", 5)) break;
        posImportFlag = lookingForDATA + 5;
     }
-    fImportFlag = (int)posImportFlag;
+    fImportFlag = (int)(intptr_t)posImportFlag;
     return fImportFlag;
 }
 
@@ -533,11 +533,11 @@ DumpObjFile(PIMAGE_FILE_HEADER pImageFileHeader, FILE *fout, int full, int fort)
    DWORD COFFSymbolCount;
 
    PCOFFSymbolTable = (PIMAGE_SYMBOL)
-      ((DWORD)pImageFileHeader + pImageFileHeader->PointerToSymbolTable);
+      ((intptr_t)pImageFileHeader + pImageFileHeader->PointerToSymbolTable);
    COFFSymbolCount = pImageFileHeader->NumberOfSymbols;
 
    PCOFFSectionHeaders = (PIMAGE_SECTION_HEADER)
-      ((DWORD)pImageFileHeader          +
+      ((intptr_t)pImageFileHeader          +
       IMAGE_SIZEOF_FILE_HEADER +
       pImageFileHeader->SizeOfOptionalHeader);
 
diff --git a/src/core/thread/inc/TThread.h b/src/core/thread/inc/TThread.h
index a023ef19c3..8635abcd6b 100644
--- a/src/core/thread/inc/TThread.h
+++ b/src/core/thread/inc/TThread.h
@@ -75,7 +75,7 @@ private:
    EState         fState;                 // thread state
    EState         fStateComing;           // coming thread state
    Long_t         fId;                    // thread id
-   Long_t         fHandle;                // Win32 thread handle
+   intptr_t       fHandle;                // Win32 thread handle
    Bool_t         fDetached;              // kTRUE if thread is Detached
    Bool_t         fNamed;                 // kTRUE if thread is Named
    VoidRtnFunc_t  fFcnRetn;               // void* start function of thread
diff --git a/src/core/thread/src/TThread.cxx b/src/core/thread/src/TThread.cxx
index 581aa0949e..3ac0e72fcb 100644
--- a/src/core/thread/src/TThread.cxx
+++ b/src/core/thread/src/TThread.cxx
@@ -978,7 +978,7 @@ again:
       bp = buf;
 
    void *arr[4];
-   arr[1] = (void*) Long_t(level);
+   arr[1] = (void*) intptr_t(level);
    arr[2] = (void*) location;
    arr[3] = (void*) bp;
    if (XARequest("ERRO", 4, arr, 0)) return;
@@ -1088,7 +1088,7 @@ void TThread::XAction()
 
       case kERRO:
          {
-            int level = (int)Long_t(fgXArr[1]);
+            int level = (int)(intptr_t)fgXArr[1];
             const char *location = (const char*)fgXArr[2];
             char *mess = (char*)fgXArr[3];
             if (level != kFatal)
@@ -1115,7 +1115,7 @@ void TThread::XAction()
 
             case 2:
                //((TCanvas*)fgXArr[1])->Constructor();
-               cmd = Form("((TCanvas *)0x%lx)->Constructor();",(Long_t)fgXArr[1]);
+               cmd = Form("((TCanvas *)0x%td)->Constructor();",(intptr_t)fgXArr[1]);
                gROOT->ProcessLine(cmd);
                break;
 
@@ -1124,7 +1124,7 @@ void TThread::XAction()
                //                 (char*)fgXArr[2],
                //                 (char*)fgXArr[3],
                //                *((Int_t*)(fgXArr[4])));
-               cmd = Form("((TCanvas *)0x%lx)->Constructor((char*)0x%lx,(char*)0x%lx,*((Int_t*)(0x%lx)));",(Long_t)fgXArr[1],(Long_t)fgXArr[2],(Long_t)fgXArr[3],(Long_t)fgXArr[4]);
+               cmd = Form("((TCanvas *)0x%td)->Constructor((char*)0x%td,(char*)0x%td,*((Int_t*)(0x%td)));",(intptr_t)fgXArr[1],(intptr_t)fgXArr[2],(intptr_t)fgXArr[3],(intptr_t)fgXArr[4]);
                gROOT->ProcessLine(cmd);
                break;
             case 6:
@@ -1133,7 +1133,7 @@ void TThread::XAction()
                //                 (char*)fgXArr[3],
                //                *((Int_t*)(fgXArr[4])),
                //                *((Int_t*)(fgXArr[5])));
-               cmd = Form("((TCanvas *)0x%lx)->Constructor((char*)0x%lx,(char*)0x%lx,*((Int_t*)(0x%lx)),*((Int_t*)(0x%lx)));",(Long_t)fgXArr[1],(Long_t)fgXArr[2],(Long_t)fgXArr[3],(Long_t)fgXArr[4],(Long_t)fgXArr[5]);
+               cmd = Form("((TCanvas *)0x%td)->Constructor((char*)0x%td,(char*)0x%td,*((Int_t*)(0x%td)),*((Int_t*)(0x%td)));",(intptr_t)fgXArr[1],(intptr_t)fgXArr[2],(intptr_t)fgXArr[3],(intptr_t)fgXArr[4],(intptr_t)fgXArr[5]);
                gROOT->ProcessLine(cmd);
                break;
 
@@ -1145,7 +1145,7 @@ void TThread::XAction()
                //               *((Int_t*)(fgXArr[5])),
                //               *((Int_t*)(fgXArr[6])),
                //               *((Int_t*)(fgXArr[7])));
-               cmd = Form("((TCanvas *)0x%lx)->Constructor((char*)0x%lx,(char*)0x%lx,*((Int_t*)(0x%lx)),*((Int_t*)(0x%lx)),*((Int_t*)(0x%lx)),*((Int_t*)(0x%lx)));",(Long_t)fgXArr[1],(Long_t)fgXArr[2],(Long_t)fgXArr[3],(Long_t)fgXArr[4],(Long_t)fgXArr[5],(Long_t)fgXArr[6],(Long_t)fgXArr[7]);
+               cmd = Form("((TCanvas *)0x%td)->Constructor((char*)0x%td,(char*)0x%td,*((Int_t*)(0x%td)),*((Int_t*)(0x%td)),*((Int_t*)(0x%td)),*((Int_t*)(0x%td)));",(intptr_t)fgXArr[1],(intptr_t)fgXArr[2],(intptr_t)fgXArr[3],(intptr_t)fgXArr[4],(intptr_t)fgXArr[5],(intptr_t)fgXArr[6],(intptr_t)fgXArr[7]);
                gROOT->ProcessLine(cmd);
                break;

@@ -1154,7 +1154,7 @@ void TThread::XAction()

       case kCDEL:
          //((TCanvas*)fgXArr[1])->Destructor();
-         cmd = Form("((TCanvas *)0x%lx)->Destructor();",(Long_t)fgXArr[1]);
+         cmd = Form("((TCanvas *)0x%lx)->Destructor();",(intptr_t)fgXArr[1]);
          gROOT->ProcessLine(cmd);
          break;

diff --git a/src/core/thread/src/TWin32Thread.cxx b/src/core/thread/src/TWin32Thread.cxx
index a0ce0ed645..c149258837 100644
--- a/src/core/thread/src/TWin32Thread.cxx
+++ b/src/core/thread/src/TWin32Thread.cxx
@@ -37,7 +37,7 @@ Int_t TWin32Thread::Run(TThread *th)
       ::CloseHandle(hHandle);
       th->fHandle = 0L;
    } else
-      th->fHandle = (Long_t)hHandle;
+      th->fHandle = (intptr_t)hHandle;
 
    th->fId = dwThreadId;
 
@@ -108,7 +108,7 @@ Int_t TWin32Thread::CleanUpPop(void **main,Int_t exe)
 
 Int_t TWin32Thread::CleanUp(void **main)
 {
-   fprintf(stderr," CleanUp %lx\n",(ULong_t)*main);
+   fprintf(stderr," CleanUp %td\n",(uintptr_t)*main);
    while(!CleanUpPop(main,1)) { }
    return 0;
 }
diff --git a/src/io/io/src/TStreamerInfo.cxx b/src/io/io/src/TStreamerInfo.cxx
index 64eec95d3e..6c19a08258 100644
--- a/src/io/io/src/TStreamerInfo.cxx
+++ b/src/io/io/src/TStreamerInfo.cxx
@@ -5038,7 +5038,7 @@ void TStreamerInfo::PrintValue(const char *name, char *pointer, Int_t i, Int_t l
                TString *st = (TString*)(pointer);
                printf("%s\n",st->Data());
             } else {
-               printf("(%s*)0x%lx\n",GetName(),(ULong_t)pointer);
+               printf("(%s*)0x%td\n",GetName(),(uintptr_t)pointer);
             }
          }
          return;
@@ -5342,7 +5342,7 @@ void TStreamerInfo::PrintValueAux(char *ladd, Int_t atype, TStreamerElement *aEl
       case kObjectp: {
          TObject **obj = (TObject**)(ladd);
          TStreamerObjectPointer *el = (TStreamerObjectPointer*)aElement;
-         printf("(%s*)%lx",el ? el->GetClass()->GetName() : "unknown_type",(Long_t)(*obj));
+         printf("(%s*)%td",el ? el->GetClass()->GetName() : "unknown_type",(intptr_t)(*obj));
          break;
       }
 
@@ -5350,7 +5350,7 @@ void TStreamerInfo::PrintValueAux(char *ladd, Int_t atype, TStreamerElement *aEl
       case kObjectP: {
          TObject **obj = (TObject**)(ladd);
          TStreamerObjectPointer *el = (TStreamerObjectPointer*)aElement;
-         printf("(%s*)%lx",el ? el->GetClass()->GetName() : "unknown_type",(Long_t)(*obj));
+         printf("(%s*)%td",el ? el->GetClass()->GetName() : "unknown_type",(intptr_t)(*obj));
          break;
       }
 
@@ -5382,7 +5382,7 @@ void TStreamerInfo::PrintValueAux(char *ladd, Int_t atype, TStreamerElement *aEl
       case kAnyp:    {
          TObject **obj = (TObject**)(ladd);
          TStreamerObjectAnyPointer *el = (TStreamerObjectAnyPointer*)aElement;
-         printf("(%s*)0x%lx",el ? el->GetClass()->GetName() : "unknown_type",(Long_t)(*obj));
+         printf("(%s*)0x%td",el ? el->GetClass()->GetName() : "unknown_type",(intptr_t)(*obj));
          break;
       }
 
@@ -5390,7 +5390,7 @@ void TStreamerInfo::PrintValueAux(char *ladd, Int_t atype, TStreamerElement *aEl
       case kAnyP:    {
          TObject **obj = (TObject**)(ladd);
          TStreamerObjectAnyPointer *el = (TStreamerObjectAnyPointer*)aElement;
-         printf("(%s*)0x%lx",el ? el->GetClass()->GetName() : "unknown_type",(Long_t)(*obj));
+         printf("(%s*)0x%td",el ? el->GetClass()->GetName() : "unknown_type",(intptr_t)(*obj));
          break;
       }
       // Any Class not derived from TObject
@@ -5457,10 +5457,10 @@ void TStreamerInfo::PrintValueAux(char *ladd, Int_t atype, TStreamerElement *aEl
                std::string *st = (std::string*)(ladd);
                printf("%s",st->c_str());
             } else {
-               printf("(%s*)0x%lx",aElement->GetClass()->GetName(),(Long_t)(ladd));
+               printf("(%s*)0x%td",aElement->GetClass()->GetName(),(intptr_t)(ladd));
             }
          } else {
-            printf("(unknown_type*)0x%lx",(Long_t)(ladd));
+            printf("(unknown_type*)0x%td",(intptr_t)(ladd));
          }
          break;
       }
diff --git a/src/io/io/inc/TMapFile.h b/src/io/io/inc/TMapFile.h
index 8e1dee9dc8..5cb057020c 100644
--- a/src/io/io/inc/TMapFile.h
+++ b/src/io/io/inc/TMapFile.h
@@ -28,13 +28,17 @@ class TMapFile : public TObject {
 friend class TMapRec;
 
 private:
+#ifdef WIN32
+   intptr_t    fFd;             ///< Descriptor of mapped file
+#else
    Int_t       fFd;             ///< Descriptor of mapped file
+#endif
    Int_t       fVersion;        ///< ROOT version (or -1 for shadow map file)
    char       *fName;           ///< Name of mapped file
    char       *fTitle;          ///< Title of mapped file
    char       *fOption;         ///< Directory creation options
    void       *fMmallocDesc;    ///< Pointer to mmalloc descriptor
-   ULong_t     fBaseAddr;       ///< Base address of mapped memory region
+   uintptr_t   fBaseAddr;       ///< Base address of mapped memory region
    Int_t       fSize;           ///< Original start size of memory mapped region
    TMapRec    *fFirst;          ///< List of streamed objects is shared memory
    TMapRec    *fLast;           ///< Last object in list of shared objects
@@ -43,13 +47,13 @@ private:
    TList      *fBrowseList;     ///< List of KeyMapFile objects
    Bool_t      fWritable;       ///< TRUE if mapped file opened in RDWR mode
    Int_t       fSemaphore;      ///< Modification semaphore (or getpid() for WIN32)
-   ULong_t     fhSemaphore;     ///< HANDLE of WIN32 Mutex object to implement semaphore
+   uintptr_t   fhSemaphore;     ///< HANDLE of WIN32 Mutex object to implement semaphore
    TObject    *fGetting;        ///< Don't deadlock in update mode, when from Get() Add() is called
    Int_t       fWritten;        ///< Number of objects written sofar
    Double_t    fSumBuffer;      ///< Sum of buffer sizes of objects written sofar
    Double_t    fSum2Buffer;     ///< Sum of squares of buffer sizes of objects written so far
 
-   static Long_t fgMapAddress;  ///< Map to this address, set address via SetMapAddress()
+   static intptr_t fgMapAddress;  ///< Map to this address, set address via SetMapAddress()
    static void  *fgMmallocDesc; ///< Used in Close() and operator delete()
 
 protected:
@@ -90,11 +94,11 @@ public:
    Int_t         GetSize() const { return fSize; }
    const char   *GetOption() const { return fOption; }
    const char   *GetTitle() const { return fTitle; }
-   TMapRec      *GetFirst() const { return (TMapRec*)((Long_t) fFirst + fOffset); }
-   TMapRec      *GetLast() const { return (TMapRec*)((Long_t) fLast + fOffset); }
+   TMapRec      *GetFirst() const { return (TMapRec*)((intptr_t) fFirst + fOffset); }
+   TMapRec      *GetLast() const { return (TMapRec*)((intptr_t) fLast + fOffset); }
    Bool_t        IsFolder() const;
    Bool_t        IsWritable() const { return fWritable; }
-   void         *OrgAddress(void *addr) const { return (void *)((Long_t)addr - fOffset); }
+   void         *OrgAddress(void *addr) const { return (void *)((intptr_t)addr - fOffset); }
    void          Print(Option_t *option="") const;
    void          ls(Option_t *option="") const;
    Bool_t        cd(const char *path = 0);
@@ -143,12 +147,12 @@ private:
 public:
    TMapRec(const char *name, const TObject *obj, Int_t size, void *buf);
    ~TMapRec();
-   const char   *GetName(Long_t offset = 0) const { return (char *)((Long_t) fName + offset); }
-   const char   *GetClassName(Long_t offset = 0) const { return (char *)((Long_t) fClassName + offset); }
-   void         *GetBuffer(Long_t offset = 0) const { return (void *)((Long_t) fBuffer + offset); }
+   const char   *GetName(Long_t offset = 0) const { return (char *)((intptr_t) fName + offset); }
+   const char   *GetClassName(Long_t offset = 0) const { return (char *)((intptr_t) fClassName + offset); }
+   void         *GetBuffer(Long_t offset = 0) const { return (void *)((intptr_t) fBuffer + offset); }
    Int_t         GetBufSize() const { return fBufSize; }
    TObject      *GetObject() const;
-   TMapRec      *GetNext(Long_t offset = 0) const { return (TMapRec *)((Long_t) fNext + offset); }
+   TMapRec      *GetNext(Long_t offset = 0) const { return (TMapRec *)((intptr_t) fNext + offset); }
 };
 
 #endif
diff --git a/src/io/io/src/TMapFile.cxx b/src/io/io/src/TMapFile.cxx
index a9a2e61ad6..c867429110 100644
--- a/src/io/io/src/TMapFile.cxx
+++ b/src/io/io/src/TMapFile.cxx
@@ -122,7 +122,7 @@ union semun {
 #endif
 
 
-Long_t TMapFile::fgMapAddress = 0;
+intptr_t TMapFile::fgMapAddress = 0;
 void  *TMapFile::fgMmallocDesc = 0;
 
 //void *ROOT::Internal::gMmallocDesc = 0; //is initialized in TStorage.cxx
@@ -238,8 +238,8 @@ TMapFile::TMapFile(const char *name, const char *title, Option_t *option,
    fSemaphore   = -1;
    fhSemaphore  = 0;
 #else
-   fFd          = (Int_t) INVALID_HANDLE_VALUE;
-   fSemaphore   = (Int_t) INVALID_HANDLE_VALUE;
+   fFd          = (intptr_t)INVALID_HANDLE_VALUE;
+   fSemaphore   = (intptr_t)INVALID_HANDLE_VALUE;
 #endif
    fMmallocDesc = 0;
    fSize        = size;
@@ -326,7 +326,7 @@ TMapFile::TMapFile(const char *name, const char *title, Option_t *option,
 #ifndef WIN32
       fFd = open(fname, O_RDWR | O_CREAT, 0644);
 #else
-      fFd = (Int_t) CreateFile(fname,                    // pointer to name of the file
+      fFd = (intptr_t) CreateFile(fname,                 // pointer to name of the file
                      GENERIC_WRITE | GENERIC_READ,       // access (read-write) mode
                      FILE_SHARE_WRITE | FILE_SHARE_READ, // share mode
                      NULL,                               // pointer to security attributes
@@ -334,7 +334,7 @@ TMapFile::TMapFile(const char *name, const char *title, Option_t *option,
                      FILE_ATTRIBUTE_TEMPORARY,           // file attributes
                      (HANDLE) NULL);                     // handle to file with attributes to copy
 #endif
-      if (fFd == (Int_t)INVALID_HANDLE_VALUE) {
+      if (fFd == (intptr_t)INVALID_HANDLE_VALUE) {
          SysError("TMapFile", "file %s can not be opened", fname);
          goto zombie;
       }
@@ -343,7 +343,7 @@ TMapFile::TMapFile(const char *name, const char *title, Option_t *option,
 #ifndef WIN32
       fFd = open(fname, O_RDONLY);
 #else
-      fFd = (Int_t) CreateFile(fname,                    // pointer to name of the file
+      fFd = (intptr_t) CreateFile(fname,                 // pointer to name of the file
                      GENERIC_READ,                       // access (read-write) mode
                      FILE_SHARE_WRITE | FILE_SHARE_READ, // share mode
                      NULL,                               // pointer to security attributes
@@ -351,7 +351,7 @@ TMapFile::TMapFile(const char *name, const char *title, Option_t *option,
                      FILE_ATTRIBUTE_TEMPORARY,           // file attributes
                      (HANDLE) NULL);                     // handle to file with attributes to copy
 #endif
-      if (fFd == (Int_t)INVALID_HANDLE_VALUE) {
+      if (fFd == (intptr_t)INVALID_HANDLE_VALUE) {
          SysError("TMapFile", "file %s can not be opened for reading", fname);
          goto zombie;
       }
@@ -469,7 +469,7 @@ TMapFile::TMapFile(const char *name, const char *title, Option_t *option,
          goto zombie;
       }
 
-      fBaseAddr = (ULong_t)((struct mdesc *) fMmallocDesc)->base;
+      fBaseAddr = (uintptr_t)((struct mdesc *) fMmallocDesc)->base;
 
       CreateSemaphore();
 
@@ -517,9 +517,9 @@ TMapFile::TMapFile(const TMapFile &f, Long_t offset) : TObject(f)
 {
    fFd          = f.fFd;
    fVersion     = f.fVersion;
-   fName        = StrDup((char *)((Long_t)f.fName + offset));
-   fTitle       = StrDup((char *)((Long_t)f.fTitle + offset));
-   fOption      = StrDup((char *)((Long_t)f.fOption + offset));
+   fName        = StrDup((char *)((intptr_t)f.fName + offset));
+   fTitle       = StrDup((char *)((intptr_t)f.fTitle + offset));
+   fOption      = StrDup((char *)((intptr_t)f.fOption + offset));
    fMmallocDesc = f.fMmallocDesc;
    fBaseAddr    = f.fBaseAddr;
    fSize        = f.fSize;
@@ -835,8 +835,8 @@ void TMapFile::CreateSemaphore(int pid)
    char buffer[] ="ROOT_Semaphore_xxxxxxxx";
    int lbuf = strlen(buffer);
    if (!pid) fSemaphore = getpid();
-   fhSemaphore = (ULong_t)CreateMutex(NULL,FALSE,itoa(fSemaphore,&buffer[lbuf-8],16));
-   if (fhSemaphore == 0) fSemaphore = (Int_t)INVALID_HANDLE_VALUE;
+   fhSemaphore = (uintptr_t)CreateMutex(NULL,FALSE,itoa(fSemaphore,&buffer[lbuf-8],16));
+   if (fhSemaphore == 0) fSemaphore = (Int_t)(uintptr_t)INVALID_HANDLE_VALUE;
 #endif
 #endif
 }
@@ -857,10 +857,10 @@ void TMapFile::DeleteSemaphore()
       semctl(semid, 0, IPC_RMID, set);
    }
 #else
-   if (fSemaphore != (Int_t)INVALID_HANDLE_VALUE) {
+   if (fSemaphore != (Int_t)(uintptr_t)INVALID_HANDLE_VALUE) {
       CloseHandle((HANDLE)fhSemaphore);
       fhSemaphore = 0;
-      fSemaphore  = (Int_t)INVALID_HANDLE_VALUE;
+      fSemaphore  = (Int_t)(uintptr_t)INVALID_HANDLE_VALUE;
    }
 #endif
 #endif
@@ -897,7 +897,7 @@ again:
    }
 #else
    // Enter Critical section to "write" lock
-   if (fSemaphore != (Int_t)INVALID_HANDLE_VALUE)
+   if (fSemaphore != (Int_t)(uintptr_t)INVALID_HANDLE_VALUE)
       WaitForSingleObject((HANDLE)fhSemaphore,INFINITE);
 #endif
 #endif
@@ -930,7 +930,7 @@ Int_t TMapFile::ReleaseSemaphore()
       }
    }
 #else
-   if (fSemaphore != (Int_t)INVALID_HANDLE_VALUE)
+   if (fSemaphore != (Int_t)(uintptr_t)INVALID_HANDLE_VALUE)
       ReleaseMutex((HANDLE)fhSemaphore);
 #endif
 #endif
@@ -1013,10 +1013,10 @@ void TMapFile::Print(Option_t *) const
    Printf("Title:                %s", fTitle);
    if (fMmallocDesc) {
       Printf("Option:               %s", fOption);
-      ULong_t size = (ULong_t)((struct mdesc *)fMmallocDesc)->top - fBaseAddr;
-      Printf("Mapped Memory region: 0x%lx - 0x%lx (%.2f MB)", fBaseAddr, fBaseAddr + size,
+      uintptr_t size = (uintptr_t)((struct mdesc *)fMmallocDesc)->top - fBaseAddr;
+      Printf("Mapped Memory region: 0x%td - 0x%td (%.2f MB)", fBaseAddr, fBaseAddr + size,
              (float)size/1048576);
-      Printf("Current breakval:     0x%lx", (ULong_t)GetBreakval());
+      Printf("Current breakval:     0x%td", (uintptr_t)GetBreakval());
    } else
       Printf("Option:               file closed");
 }
@@ -1232,8 +1232,8 @@ TMapFile *TMapFile::WhichMapFile(void *addr)
    while (lnk) {
       TMapFile *mf = (TMapFile*)lnk->GetObject();
       if (!mf) return 0;
-      if ((ULong_t)addr >= mf->fBaseAddr + mf->fOffset &&
-          (ULong_t)addr <  (ULong_t)mf->GetBreakval() + mf->fOffset)
+      if ((uintptr_t)addr >= mf->fBaseAddr + mf->fOffset &&
+          (uintptr_t)addr <  (uintptr_t)mf->GetBreakval() + mf->fOffset)
          return mf;
       lnk = lnk->Prev();
    }
diff --git a/src/io/io/src/TBufferIO.cxx b/src/io/io/src/TBufferIO.cxx
index 99e2fe6a12..7453763622 100644
--- a/src/io/io/src/TBufferIO.cxx
+++ b/src/io/io/src/TBufferIO.cxx
@@ -169,7 +169,7 @@ void TBufferIO::MapObject(const TObject *obj, UInt_t offset)
       if (obj) {
          CheckCount(offset);
          ULong_t hash = Void_Hash(obj);
-         fMap->Add(hash, (Long_t)obj, offset);
+         fMap->Add(hash, (intptr_t)obj, offset);
          // No need to keep track of the class in write mode
          // fClassMap->Add(hash, (Long_t)obj, (Long_t)((TObject*)obj)->IsA());
          fMapCount++;
@@ -178,8 +178,8 @@ void TBufferIO::MapObject(const TObject *obj, UInt_t offset)
       if (!fMap || !fClassMap)
          InitMap();
 
-      fMap->Add(offset, (Long_t)obj);
-      fClassMap->Add(offset, (obj && obj != (TObject *)-1) ? (Long_t)((TObject *)obj)->IsA() : 0);
+      fMap->Add(offset, (intptr_t)obj);
+      fClassMap->Add(offset, (obj && obj != (TObject *)-1) ? (intptr_t)((TObject *)obj)->IsA() : 0);
       fMapCount++;
    }
 }
@@ -202,7 +202,7 @@ void TBufferIO::MapObject(const void *obj, const TClass *cl, UInt_t offset)
       if (obj) {
          CheckCount(offset);
          ULong_t hash = Void_Hash(obj);
-         fMap->Add(hash, (Long_t)obj, offset);
+         fMap->Add(hash, (intptr_t)obj, offset);
          // No need to keep track of the class in write mode
          // fClassMap->Add(hash, (Long_t)obj, (Long_t)cl);
          fMapCount++;
@@ -211,8 +211,8 @@ void TBufferIO::MapObject(const void *obj, const TClass *cl, UInt_t offset)
       if (!fMap || !fClassMap)
          InitMap();
 
-      fMap->Add(offset, (Long_t)obj);
-      fClassMap->Add(offset, (Long_t)cl);
+      fMap->Add(offset, (intptr_t)obj);
+      fClassMap->Add(offset, (intptr_t)cl);
       fMapCount++;
    }
 }
@@ -244,9 +244,9 @@ Bool_t TBufferIO::CheckObject(const void *obj, const TClass *ptrClass)
    if (clActual && (ptrClass != clActual)) {
       const char *temp = (const char *)obj;
       temp -= clActual->GetBaseClassOffset(ptrClass);
-      idx = (ULong_t)fMap->GetValue(Void_Hash(temp), (Long_t)temp);
+      idx = (ULong_t)fMap->GetValue(Void_Hash(temp), (intptr_t)temp);
    } else {
-      idx = (ULong_t)fMap->GetValue(Void_Hash(obj), (Long_t)obj);
+      idx = (ULong_t)fMap->GetValue(Void_Hash(obj), (intptr_t)obj);
    }
 
    return idx ? kTRUE : kFALSE;
@@ -265,8 +265,8 @@ void TBufferIO::GetMappedObject(UInt_t tag, void *&ptr, TClass *&ClassPtr) const
    //     ptr = nullptr;
    //     ClassPtr = nullptr;
    //   } else {
-   ptr = (void *)(Long_t)fMap->GetValue(tag);
-   ClassPtr = (TClass *)(Long_t)fClassMap->GetValue(tag);
+   ptr = (void *)(intptr_t)fMap->GetValue(tag);
+   ClassPtr = (TClass *)(intptr_t)fClassMap->GetValue(tag);
    //  }
 }

@@ -279,7 +279,7 @@ Long64_t TBufferIO::GetObjectTag(const void *obj)
    if (!obj || !fMap)
       return 0;
 
-   return fMap->GetValue(Void_Hash(obj), (Long_t)obj);
+   return fMap->GetValue(Void_Hash(obj), (intptr_t)obj);
 }
 
 ////////////////////////////////////////////////////////////////////////////////
diff --git a/src/io/io/src/TBufferJSON.cxx b/src/io/io/src/TBufferJSON.cxx
index 016e988316..9d01730060 100644
--- a/src/io/io/src/TBufferJSON.cxx
+++ b/src/io/io/src/TBufferJSON.cxx
@@ -531,7 +531,7 @@ TString TBufferJSON::ConvertToJSON(const TObject *obj, Int_t compact, const char
       if (!clActual)
          clActual = TObject::Class();
       else if (clActual != TObject::Class())
-         ptr = (void *)((Long_t)obj - clActual->GetBaseClassOffset(TObject::Class()));
+         ptr = (void *)((intptr_t)obj - clActual->GetBaseClassOffset(TObject::Class()));
    }
 
    return ConvertToJSON(ptr, clActual, compact, member_name);
diff --git a/src/io/io/src/TBufferFile.cxx b/src/io/io/src/TBufferFile.cxx
index c3ef08a4a8..923500359f 100644
--- a/src/io/io/src/TBufferFile.cxx
+++ b/src/io/io/src/TBufferFile.cxx
@@ -359,10 +359,10 @@ Int_t TBufferFile::CheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass *cl
 
    Int_t  offset = 0;
 
-   Long_t endpos = Long_t(fBuffer) + startpos + bcnt + sizeof(UInt_t);
+   intptr_t endpos = intptr_t(fBuffer) + startpos + bcnt + sizeof(UInt_t);
 
-   if (Long_t(fBufCur) != endpos) {
-      offset = Int_t(Long_t(fBufCur) - endpos);
+   if (intptr_t(fBufCur) != endpos) {
+      offset = Int_t(intptr_t(fBufCur) - endpos);
 
       const char *name = clss ? clss->GetName() : classname ? classname : 0;
 
@@ -2396,7 +2396,7 @@ void *TBufferFile::ReadObjectAny(const TClass *clCast)
    // (this can only happen when called via CheckObject())
    char *obj;
    if (fVersion > 0) {
-      obj = (char *) (Long_t)fMap->GetValue(startpos+kMapOffset);
+      obj = (char *) (intptr_t)fMap->GetValue(startpos+kMapOffset);
       if (obj == (void*) -1) obj = nullptr;
       if (obj) {
          CheckByteCount(startpos, tag, (TClass *)nullptr);
@@ -2428,8 +2428,8 @@ void *TBufferFile::ReadObjectAny(const TClass *clCast)
             // exception
          }
       }
-      obj = (char *) (Long_t)fMap->GetValue(tag);
-      clRef = (TClass*) (Long_t)fClassMap->GetValue(tag);
+      obj = (char *) (intptr_t)fMap->GetValue(tag);
+      clRef = (TClass*) (intptr_t)fClassMap->GetValue(tag);
 
       if (clRef && (clRef!=(TClass*)(-1)) && clCast) {
          //baseOffset will be -1 if clRef does not inherit from clCast.
@@ -2504,7 +2504,7 @@ void TBufferFile::WriteObjectClass(const void *actualObjectStart, const TClass *
       UInt_t slot;
       ULong_t hash = Void_Hash(actualObjectStart);
 
-      if ((idx = (ULong_t)fMap->GetValue(hash, (Long_t)actualObjectStart, slot)) != 0) {
+      if ((idx = (ULong_t)fMap->GetValue(hash, (intptr_t)actualObjectStart, slot)) != 0) {
 
          // truncation is OK the value we did put in the map is an 30-bit offset
          // and not a pointer
@@ -2539,10 +2539,10 @@ void TBufferFile::WriteObjectClass(const void *actualObjectStart, const TClass *
             //MapObject(actualObjectStart, actualClass, cntpos+kMapOffset);
             UInt_t offset = cntpos+kMapOffset;
             if (mapsize == fMap->Capacity()) {
-               fMap->AddAt(slot, hash, (Long_t)actualObjectStart, offset);
+               fMap->AddAt(slot, hash, (intptr_t)actualObjectStart, offset);
             } else {
                // The slot depends on the capacity and WriteClass has induced an increase.
-               fMap->Add(hash, (Long_t)actualObjectStart, offset);
+               fMap->Add(hash, (intptr_t)actualObjectStart, offset);
             }
             // No need to keep track of the class in write mode
             // fClassMap->Add(hash, (Long_t)obj, (Long_t)((TObject*)obj)->IsA());
@@ -2601,7 +2601,7 @@ TClass *TBufferFile::ReadClass(const TClass *clReq, UInt_t *objTag)
       // add class to fMap for later reference
       if (fVersion > 0) {
          // check if class was already read
-         TClass *cl1 = (TClass *)(Long_t)fMap->GetValue(startpos+kMapOffset);
+         TClass *cl1 = (TClass *)(intptr_t)fMap->GetValue(startpos+kMapOffset);
          if (cl1 != cl)
             MapObject(cl ? cl : (TObject*) -1, startpos+kMapOffset);
       } else
@@ -2624,7 +2624,7 @@ TClass *TBufferFile::ReadClass(const TClass *clReq, UInt_t *objTag)
       }

       // class can be 0 if dictionary was not found
-      cl = (TClass *)(Long_t)fMap->GetValue(clTag);
+      cl = (TClass *)(intptr_t)fMap->GetValue(clTag);
    }

    if (cl && clReq &&
@@ -2657,7 +2657,7 @@ void TBufferFile::WriteClass(const TClass *cl)
    ULong_t hash = Void_Hash(cl);
    UInt_t slot;
 
-   if ((idx = (ULong_t)fMap->GetValue(hash, (Long_t)cl,slot)) != 0) {
+   if ((idx = (ULong_t)fMap->GetValue(hash, (intptr_t)cl,slot)) != 0) {
 
       // truncation is OK the value we did put in the map is an 30-bit offset
       // and not a pointer
@@ -2679,7 +2679,7 @@ void TBufferFile::WriteClass(const TClass *cl)
 
       // store new class reference in fMap (+kMapOffset so it's != kNullTag)
       CheckCount(offset+kMapOffset);
-      fMap->AddAt(slot, hash, (Long_t)cl, offset+kMapOffset);
+      fMap->AddAt(slot, hash, (intptr_t)cl, offset+kMapOffset);
       fMapCount++;
    }
 }
diff --git a/src/core/clib/src/attach.c b/src/core/clib/src/attach.c
index 0e83d58b96..a3fdc5a115 100644
--- a/src/core/clib/src/attach.c
+++ b/src/core/clib/src/attach.c
@@ -166,8 +166,12 @@ mmalloc_attach (fd, baseaddr, minsize)
           mdp -> flags |= MMALLOC_DEVZERO;
         }
     }
+#else
+#if _WIN64
+  if (mdp -> fd == (HANDLE)0xffffffffffffffff) mdp -> flags |= MMALLOC_DEVZERO;
 #else
   if (mdp -> fd == (HANDLE)0xffffffff) mdp -> flags |= MMALLOC_DEVZERO;
+#endif
 #endif /* WIN32 */
 
   /*  Now try to map in the first page, copy the malloc descriptor structure
diff --git a/src/core/clib/src/keys.c b/src/core/clib/src/keys.c
index 68855f0ff1..18da9d3b8c 100644
--- a/src/core/clib/src/keys.c
+++ b/src/core/clib/src/keys.c
@@ -78,7 +78,7 @@ mmalloc_getkey (md, keynum)
 
   if ((mdp != NULL) && (keynum >= 0) && (keynum < MMALLOC_KEYS))
     {
-      keyval = (PTR)((long)mdp -> keys [keynum] + mdp->offset);
+      keyval = (PTR)((intptr_t)mdp -> keys [keynum] + mdp->offset);
     }
   return (keyval);
 }
diff --git a/src/core/base/inc/TPluginManager.h b/src/core/base/inc/TPluginManager.h
index adf1d96e28..0a7093bb64 100644
--- a/src/core/base/inc/TPluginManager.h
+++ b/src/core/base/inc/TPluginManager.h
@@ -145,7 +145,7 @@ public:
    Int_t       CheckPlugin() const;
    Int_t       LoadPlugin();
 
-   template <typename... T> Long_t ExecPluginImpl(const T&... params)
+   template <typename... T> intptr_t ExecPluginImpl(const T&... params)
    {
       auto nargs = sizeof...(params);
       if (!CheckForExecPlugin(nargs)) return 0;
@@ -157,13 +157,17 @@ public:
       R__LOCKGUARD(gInterpreterMutex);
       fCallEnv->SetParams(params...);
 
+#ifdef _WIN64
+      intptr_t ret;
+#else
       Long_t ret;
+#endif
       fCallEnv->Execute(ret);
 
       return ret;
    }
 
-   template <typename... T> Long_t ExecPlugin(int nargs, const T&... params)
+   template <typename... T> intptr_t ExecPlugin(int nargs, const T&... params)
    {
       // For backward compatibility.
       if ((gDebug > 1) && (nargs != (int)sizeof...(params))) {
diff --git a/src/io/io/src/TMemFile.cxx b/src/io/io/src/TMemFile.cxx
index 0ccf0ce60a..f5b348907c 100644
--- a/src/io/io/src/TMemFile.cxx
+++ b/src/io/io/src/TMemFile.cxx
@@ -409,7 +409,7 @@ void TMemFile::ResetObjects(TDirectoryFile *directory, TFileMergeInfo *info) con
    }
 
    TString listHargs;
-   listHargs.Form("(TFileMergeInfo*)0x%lx",(ULong_t)info);
+   listHargs.Form("(TFileMergeInfo*)0x%td",(uintptr_t)info);
 
    TIter   next(directory->GetList());
    TObject *idcur;
diff --git a/src/io/io/src/TFile.cxx b/src/io/io/src/TFile.cxx
index adfb461fd6..ba1b3e7204 100644
--- a/src/io/io/src/TFile.cxx
+++ b/src/io/io/src/TFile.cxx
@@ -578,7 +578,7 @@ TFile::~TFile()
    }
 
    if (gDebug)
-      Info("~TFile", "dtor called for %s [%lx]", GetName(),(Long_t)this);
+      Info("~TFile", "dtor called for %s [%td]", GetName(),(intptr_t)this);
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -1860,7 +1860,7 @@ TProcessID  *TFile::ReadProcessID(UShort_t pidf)
    snprintf(pidname,32,"ProcessID%d",pidf);
    pid = (TProcessID *)Get(pidname);
    if (gDebug > 0) {
-      printf("ReadProcessID, name=%s, file=%s, pid=%lx\n",pidname,GetName(),(Long_t)pid);
+      printf("ReadProcessID, name=%s, file=%s, pid=%td\n",pidname,GetName(),(intptr_t)pid);
    }
    if (!pid) {
       //file->Error("ReadProcessID","Cannot find %s in file %s",pidname,file->GetName());
diff --git a/src/io/io/src/TFileMerger.cxx b/src/io/io/src/TFileMerger.cxx
index 45a65fb746..81bf26054a 100644
--- a/src/io/io/src/TFileMerger.cxx
+++ b/src/io/io/src/TFileMerger.cxx
@@ -608,7 +608,7 @@ Bool_t TFileMerger::MergeRecursive(TDirectory *target, TList *sourcelist, Int_t
 
                TList listH;
                TString listHargs;
-               listHargs.Form("(TCollection*)0x%lx,(TFileMergeInfo*)0x%lx", (ULong_t)&listH,(ULong_t)&info);
+               listHargs.Form("(TCollection*)0x%td,(TFileMergeInfo*)0x%td", (uintptr_t)&listH,(uintptr_t)&info);
 
                // Loop over all source files and merge same-name object
                TFile *nextsource = current_file ? (TFile*)sourcelist->After( current_file ) : (TFile*)sourcelist->First();
@@ -671,7 +671,7 @@ Bool_t TFileMerger::MergeRecursive(TDirectory *target, TList *sourcelist, Int_t
 
                TList listH;
                TString listHargs;
-               listHargs.Form("((TCollection*)0x%lx)", (ULong_t)&listH);
+               listHargs.Form("((TCollection*)0x%td)", (uintptr_t)&listH);
 
                // Loop over all source files and merge same-name object
                TFile *nextsource = current_file ? (TFile*)sourcelist->After( current_file ) : (TFile*)sourcelist->First();
